// Automatically generated by parse_opcodes (noah95/riscv-opcodes)
//===----------------------------------------------------------------------===//
// GROUP: Xfalthalf (pred: HasExtXfalthalf)
//        alternate half-precision floats
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfalthalf : SubtargetFeature<
  "xfalthalf", "HasExtXfalthalf", "true", "'Xfalthalf' (alternate half-precision floats)">;
def HasExtXfalthalf : Predicate<
  "Subtarget->hasExtXfalthalf()">, AssemblerPredicate<(all_of FeatureExtXfalthalf), "'Xfalthalf' (alternate half-precision floats)">;
let Predicates = [HasExtXfalthalf] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def FCVT_H_H : RVInstRFrm<0b0100010, RISCVOpcode<"FCVT_H_H", 0b1010011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, frmarg:$funct3), "fcvt.h.h", "$rd, $rs1, $funct3">, Sched<[]> {
    let rs2 = 0b00010;
  }
def      : InstAlias<"fcvt.h.h $rd, $rs1", (FCVT_H_H FPR16:$rd, FPR16:$rs1, 0b111)>;

// Pseudo instructions
def : InstAlias<"flah $rd, ${imm12}(${rs1})",   (FLH FPR16:$rd, GPR:$rs1, simm12:$imm12), 0>;
def : InstAlias<"fsah $rs2, ${imm12}(${rs1})",   (FSH FPR16:$rs2, GPR:$rs1, simm12:$imm12), 0>;
def : InstAlias<"fmadd.ah $rd, $rs1, $rs2, $rs3, $rm",   (FMADD_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, frmarg:$rm), 0>;
def : InstAlias<"fmadd.ah $rd, $rs1, $rs2, $rs3",   (FMADD_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, 0b111), 0>;
def : InstAlias<"fmsub.ah $rd, $rs1, $rs2, $rs3, $rm",   (FMSUB_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, frmarg:$rm), 0>;
def : InstAlias<"fmsub.ah $rd, $rs1, $rs2, $rs3",   (FMSUB_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, 0b111), 0>;
def : InstAlias<"fnmsub.ah $rd, $rs1, $rs2, $rs3, $rm",   (FNMSUB_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, frmarg:$rm), 0>;
def : InstAlias<"fnmsub.ah $rd, $rs1, $rs2, $rs3",   (FNMSUB_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, 0b111), 0>;
def : InstAlias<"fnmadd.ah $rd, $rs1, $rs2, $rs3, $rm",   (FNMADD_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, frmarg:$rm), 0>;
def : InstAlias<"fnmadd.ah $rd, $rs1, $rs2, $rs3",   (FNMADD_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, 0b111), 0>;
def : InstAlias<"fadd.ah $rd, $rs1, $rs2, $rm",   (FADD_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fadd.ah $rd, $rs1, $rs2",   (FADD_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, 0b111), 0>;
def : InstAlias<"fsub.ah $rd, $rs1, $rs2, $rm",   (FSUB_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fsub.ah $rd, $rs1, $rs2",   (FSUB_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, 0b111), 0>;
def : InstAlias<"fmul.ah $rd, $rs1, $rs2, $rm",   (FMUL_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fmul.ah $rd, $rs1, $rs2",   (FMUL_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, 0b111), 0>;
def : InstAlias<"fdiv.ah $rd, $rs1, $rs2, $rm",   (FDIV_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fdiv.ah $rd, $rs1, $rs2",   (FDIV_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2, 0b111), 0>;
def : InstAlias<"fsqrt.ah $rd, $rs1, $rm",   (FSQRT_H FPR16:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fsqrt.ah $rd, $rs1",   (FSQRT_H FPR16:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fsgnj.ah $rd, $rs1, $rs2",   (FSGNJ_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fsgnjn.ah $rd, $rs1, $rs2",   (FSGNJN_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fsgnjx.ah $rd, $rs1, $rs2",   (FSGNJX_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fmin.ah $rd, $rs1, $rs2",   (FMIN_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fmax.ah $rd, $rs1, $rs2",   (FMAX_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"feq.ah $rd, $rs1, $rs2",   (FEQ_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"flt.ah $rd, $rs1, $rs2",   (FLT_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fle.ah $rd, $rs1, $rs2",   (FLE_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fcvt.w.ah $rd, $rs1, $rm",   (FCVT_W_H GPR:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.w.ah $rd, $rs1",   (FCVT_W_H GPR:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.wu.ah $rd, $rs1, $rm",   (FCVT_WU_H GPR:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.wu.ah $rd, $rs1",   (FCVT_WU_H GPR:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ah.w $rd, $rs1, $rm",   (FCVT_H_W FPR16:$rd, GPR:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ah.w $rd, $rs1",   (FCVT_H_W FPR16:$rd, GPR:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ah.wu $rd, $rs1, $rm",   (FCVT_H_WU FPR16:$rd, GPR:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ah.wu $rd, $rs1",   (FCVT_H_WU FPR16:$rd, GPR:$rs1, 0b111), 0>;
def : InstAlias<"fmv.x.ah $rd, $rs1",   (FMV_X_H GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fclass.ah $rd, $rs1",   (FCLASS_H GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fmv.ah.x $rd, $rs1",   (FMV_H_X FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"fcvt.l.ah $rd, $rs1, $rm",   (FCVT_L_H GPR:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.l.ah $rd, $rs1",   (FCVT_L_H GPR:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.lu.ah $rd, $rs1, $rm",   (FCVT_LU_H GPR:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.lu.ah $rd, $rs1",   (FCVT_LU_H GPR:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ah.l $rd, $rs1, $rm",   (FCVT_H_L FPR16:$rd, GPR:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ah.l $rd, $rs1",   (FCVT_H_L FPR16:$rd, GPR:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ah.lu $rd, $rs1, $rm",   (FCVT_H_LU FPR16:$rd, GPR:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ah.lu $rd, $rs1",   (FCVT_H_LU FPR16:$rd, GPR:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.s.ah $rd, $rs1",   (FCVT_S_H FPR32:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fcvt.ah.s $rd, $rs1, $rm",   (FCVT_H_S FPR16:$rd, FPR32:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ah.s $rd, $rs1",   (FCVT_H_S FPR16:$rd, FPR32:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.d.ah $rd, $rs1",   (FCVT_D_H FPR64:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fcvt.ah.d $rd, $rs1, $rm",   (FCVT_H_D FPR16:$rd, FPR64:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ah.d $rd, $rs1",   (FCVT_H_D FPR16:$rd, FPR64:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ah.h $rd, $rs1, $rm",   (FCVT_H_H FPR16:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ah.h $rd, $rs1",   (FCVT_H_H FPR16:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.h.ah $rd, $rs1, $rm",   (FCVT_H_H FPR16:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.h.ah $rd, $rs1",   (FCVT_H_H FPR16:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ah.ah $rd, $rs1, $rm",   (FCVT_H_H FPR16:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ah.ah $rd, $rs1",   (FCVT_H_H FPR16:$rd, FPR16:$rs1, 0b111), 0>;
} // let Predicates = [HasExtXfalthalf]


//===----------------------------------------------------------------------===//
// GROUP: Xfquarter (pred: HasExtXfquarter)
//        quarter-precision floats
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfquarter : SubtargetFeature<
  "xfquarter", "HasExtXfquarter", "true", "'Xfquarter' (quarter-precision floats)">;
def HasExtXfquarter : Predicate<
  "Subtarget->hasExtXfquarter()">, AssemblerPredicate<(all_of FeatureExtXfquarter), "'Xfquarter' (quarter-precision floats)">;

def FeatureExtZquarterinx : SubtargetFeature<
  "zquarterinx", "HasExtZquarterinx", "true", "'Zquarterinx' (Quarter Float in Integer)", [FeatureStdExtZfinx]>;
def HasExtZquarterinx : Predicate<
  "Subtarget->hasExtZquarterinx()">, AssemblerPredicate<(all_of FeatureExtZquarterinx), "'Zquarterinx' (quarter-precision floats in integer registers)">;

def HasExtZquarterinxOrXfquarter
      : Predicate<"Subtarget->hasExtZquarterinx() || Subtarget->hasExtXfquarter()">,
                  AssemblerPredicate<(any_of FeatureExtZquarterinx, FeatureExtXfquarter),
                                   "'Zquarterinx' (quarter-precision floats in integer registers) or "
                                   "'Xfquarter' (quarter-precision floats)">;

def XfquarterExt       : ExtInfo<0, [HasExtXfquarter]>;
def Xfquarter64Ext     : ExtInfo<0, [HasExtXfquarter, IsRV64]>;
def ZquarterinxExt     : ExtInfo<1, [HasExtZquarterinx]>;
def Zquarterinx64Ext   : ExtInfo<1, [HasExtZquarterinx, IsRV64]>;

def ZquarterDExt       : ExtInfo<0, [HasExtXfquarter,     HasStdExtD]>;
def ZquarterinxZdinxExt   : ExtInfo<1, [HasExtZquarterinx, HasStdExtZdinx]>;

def B      : ExtInfo_r<XfquarterExt,      FPR16>;
def B_INX  : ExtInfo_r<ZquarterinxExt,    FPR16INX>;
def BB     : ExtInfo_rr<XfquarterExt,     FPR16,    FPR16>;
def BB_INX : ExtInfo_rr<ZquarterinxExt,   FPR16INX, FPR16INX>;

def XB     : ExtInfo_rr<XfquarterExt,     GPR,      FPR16>;
def XB_INX : ExtInfo_rr<ZquarterinxExt,   GPR,      FPR16INX>;
def BX     : ExtInfo_rr<XfquarterExt,     FPR16,    GPR>;
def BX_INX : ExtInfo_rr<ZquarterinxExt,   FPR16INX, GPR>;

def HB     : ExtInfo_rr<XfquarterExt,     FPR16,    FPR16>;
def HB_INX : ExtInfo_rr<ZquarterinxExt,   FPR16INX, FPR16INX>;
def BF     : ExtInfo_rr<XfquarterExt,     FPR16,    FPR32>;
def BF_INX : ExtInfo_rr<ZquarterinxExt,   FPR16INX, FPR32INX>;
def FB     : ExtInfo_rr<XfquarterExt,     FPR32,    FPR16>;
def FB_INX : ExtInfo_rr<ZquarterinxExt,   FPR32INX, FPR16INX>;
def DB     : ExtInfo_rr<ZquarterDExt,        FPR64,    FPR16>;
def DB_INX : ExtInfo_rr<ZquarterinxZdinxExt, FPR64INX, FPR16INX>;
def BD     : ExtInfo_rr<ZquarterDExt,        FPR16,    FPR64>;
def BD_INX : ExtInfo_rr<ZquarterinxZdinxExt, FPR16INX, FPR64INX>;

def XB_64     : ExtInfo_rr<Xfquarter64Ext,   GPR,      FPR16>;
def BX_64     : ExtInfo_rr<Xfquarter64Ext,   FPR16,    GPR>;
def XB_INX_64 : ExtInfo_rr<Zquarterinx64Ext, GPR,      FPR16INX>;
def BX_INX_64 : ExtInfo_rr<Zquarterinx64Ext, FPR16INX, GPR>;

defvar BINX     = [B,  B_INX];
defvar BBINX    = [BB, BB_INX];
defvar XBINX    = [XB, XB_INX];
defvar BXINX    = [BX, BX_INX];
defvar DBINX    = [DB, DB_INX];
defvar BDINX    = [BD, BD_INX];
defvar BFINX    = [BF, BF_INX];
defvar FBINX    = [FB, FB_INX];
defvar BHINX    = [HB, HB_INX];
defvar HBINX    = [HB, HB_INX];
defvar XBIN64X  = [XB_64, XB_INX_64];
defvar BXIN64X  = [BX_64, BX_INX_64];

let Predicates = [HasExtZquarterinxOrXfquarter] in {

// Instructions
let hasSideEffects = 0, mayLoad = 1, mayStore = 0 in
def FLB : RVInstI<0b000, RISCVOpcode<"FLB", 0b0000111>, (outs FPR16:$rd),
             (ins GPR:$rs1, simm12:$imm12), "flb", "$rd, ${imm12}(${rs1})">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
def FSB : RVInstS<0b000, RISCVOpcode<"FSB", 0b0100111>, (outs ),
             (ins FPR16:$rs2, GPR:$rs1, simm12:$imm12), "fsb", "$rs2, ${imm12}(${rs1})">, Sched<[]>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FMADD_B  : FPFMA_rrr_frm_m<RISCVOpcode<"FMADD_B", 0b1000011>,  0b11, "fmadd.b",  BINX>;
defm : FPFMADynFrmAlias_m<FMADD_B,  "fmadd.b",  BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FMSUB_B  : FPFMA_rrr_frm_m<RISCVOpcode<"FMSUB_B", 0b1000111>,  0b11, "fmsub.b",  BINX>;
defm : FPFMADynFrmAlias_m<FMSUB_B,  "fmsub.b",  BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FNMSUB_B : FPFMA_rrr_frm_m<RISCVOpcode<"FNMSUB_B", 0b1001011>, 0b11, "fnmsub.b", BINX>;
defm : FPFMADynFrmAlias_m<FNMSUB_B, "fnmsub.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FNMADD_B : FPFMA_rrr_frm_m<RISCVOpcode<"FNMADD_B", 0b1001111>, 0b11, "fnmadd.b", BINX>;
defm : FPFMADynFrmAlias_m<FNMSUB_B, "fnmadd.b", BINX>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FADD_B : FPALU_rr_frm_m<0b0000011, "fadd.b", HINX>;
defm : FPALUDynFrmAlias_m<FADD_B, "fadd.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FSUB_B : FPALU_rr_frm_m<0b0000111, "fsub.b", HINX>;
defm : FPALUDynFrmAlias_m<FSUB_B, "fsub.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FMUL_B : FPALU_rr_frm_m<0b0001011, "fmul.b", BINX>;
defm : FPALUDynFrmAlias_m<FMUL_B, "fmul.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FDIV_B : FPALU_rr_frm_m<0b0001111, "fdiv.b", BINX>;
defm : FPALUDynFrmAlias_m<FDIV_B, "fdiv.b", BINX>;

defm FSQRT_B : FPUnaryOp_r_frm_m<0b0101111, 0b00000, BBINX, "fsqrt.b">, Sched<[]>;
defm         : FPUnaryOpDynFrmAlias_m<FSQRT_B, "fsqrt.b", BBINX>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
defm FSGNJ_B  : FPALU_rr_m<0b0010011, 0b000, "fsgnj.b",  BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
defm FSGNJN_B : FPALU_rr_m<0b0010011, 0b001, "fsgnjn.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
defm FSGNJX_B : FPALU_rr_m<0b0010011, 0b010, "fsgnjx.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
defm FMIN_B   : FPALU_rr_m<0b0010111, 0b000, "fmin.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
defm FMAX_B   : FPALU_rr_m<0b0010111, 0b001, "fmax.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
defm FEQ_B : FPCmp_rr_m<0b1010011, 0b010, "feq.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
defm FLT_B : FPCmp_rr_m<0b1010011, 0b001, "flt.b", BINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 1 in
defm FLE_B : FPCmp_rr_m<0b1010011, 0b000, "fle.b", BINX>;

let mayRaiseFPException = 0 in
def FMV_X_B : FPUnaryOp_r<0b1110011, 0b00000, 0b000, GPR, FPR16, "fmv.x.b">, Sched<[]>;
let mayRaiseFPException = 0 in
def FMV_B_X : FPUnaryOp_r<0b1111011, 0b00000, 0b000, FPR16, GPR, "fmv.b.x">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, mayRaiseFPException = 0 in
defm FCLASS_B : FPUnaryOp_r_m<0b1110011, 0b00000, 0b001, XBINX, "fclass.b">,
                Sched<[WriteFClass16, ReadFClass16]>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_W_B : FPUnaryOp_r_frm_m<0b1100011, 0b00000, XBINX, "fcvt.w.b">, Sched<[]>;
defm          : FPUnaryOpDynFrmAlias_m<FCVT_W_B, "fcvt.w.b", XBINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_WU_B : FPUnaryOp_r_frm_m<0b1100011, 0b00001, XBINX, "fcvt.wu.b">, Sched<[]>;
defm           : FPUnaryOpDynFrmAlias_m<FCVT_WU_B, "fcvt.wu.b", XBINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_B_W : FPUnaryOp_r_frm_m<0b1101011, 0b00000, BXINX, "fcvt.b.w">, Sched<[]>;
defm          : FPUnaryOpDynFrmAlias_m<FCVT_B_W, "fcvt.b.w", BXINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_B_WU : FPUnaryOp_r_frm_m<0b1101011, 0b00001, BXINX, "fcvt.b.wu">, Sched<[]>;
defm           : FPUnaryOpDynFrmAlias_m<FCVT_B_WU, "fcvt.b.wu", BXINX>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_S_B : FPUnaryOp_r_m<0b0100000, 0b00011, 0b000, FBINX, "fcvt.s.b">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_B_S : FPUnaryOp_r_frm_m<0b0100011, 0b00000, BFINX, "fcvt.b.s">, Sched<[]>;
defm          : FPUnaryOpDynFrmAlias_m<FCVT_B_S, "fcvt.b.s", BFINX>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_H_B : FPUnaryOp_r_frm_m<0b0100010, 0b00011, HBINX, "fcvt.h.b">, Sched<[]>;
defm          : FPUnaryOpDynFrmAlias_m<FCVT_H_B, "fcvt.h.b", HBINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_B_H : FPUnaryOp_r_frm_m<0b0100011, 0b00010, BHINX, "fcvt.b.h">, Sched<[]>;
defm          : FPUnaryOpDynFrmAlias_m<FCVT_B_H, "fcvt.b.h", BHINX>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_L_B  : FPUnaryOp_r_frm_m<0b1100011, 0b00010, XBIN64X, "fcvt.l.b">,
                 Sched<[WriteFCvtF16ToI64, ReadFCvtF16ToI64]>;
defm           : FPUnaryOpDynFrmAlias_m<FCVT_L_B, "fcvt.l.b", XBIN64X>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_LU_B  : FPUnaryOp_r_frm_m<0b1100011, 0b00011, XBIN64X, "fcvt.lu.b">,
                  Sched<[WriteFCvtF16ToI64, ReadFCvtF16ToI64]>;
defm            : FPUnaryOpDynFrmAlias_m<FCVT_LU_B, "fcvt.lu.b", XBIN64X>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_B_L : FPUnaryOp_r_frm_m<0b1101011, 0b00010, BXIN64X, "fcvt.b.l">,
                Sched<[WriteFCvtI64ToF16, ReadFCvtI64ToF16]>;
defm          : FPUnaryOpDynFrmAlias_m<FCVT_B_L, "fcvt.b.l", BXIN64X>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_B_LU : FPUnaryOp_r_frm_m<0b1101011, 0b00011, BXIN64X, "fcvt.b.lu">,
                 Sched<[WriteFCvtI64ToF16, ReadFCvtI64ToF16]>;
defm           : FPUnaryOpDynFrmAlias_m<FCVT_B_LU, "fcvt.b.lu", BXIN64X>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_B_D : FPUnaryOp_r_frm_m<0b0100011, 0b00001, BDINX, "fcvt.b.d">,
                Sched<[WriteFCvtF64ToF16, ReadFCvtF64ToF16]>;
defm          : FPUnaryOpDynFrmAlias_m<FCVT_B_D, "fcvt.b.d", BDINX>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
defm FCVT_D_B : FPUnaryOp_r_m<0b0100001, 0b00011, 0b000, DBINX, "fcvt.d.b">,
                Sched<[WriteFCvtF16ToF64, ReadFCvtF16ToF64]>;

// Pseudo instructions
// def : InstAlias<"fcvt.ah.b $rd, $rs1",   (FCVT_H_B FPR16:$rd, FPR16:$rs1), 0>;
// def : InstAlias<"fcvt.b.ah $rd, $rs1, $rm",   (FCVT_B_H FPR16:$rd, FPR16:$rs1, frmarg:$rm), 0>;
// def : InstAlias<"fcvt.b.ah $rd, $rs1",   (FCVT_B_H FPR16:$rd, FPR16:$rs1, 0b111), 0>;
} // let Predicates = [HasExtZquarterinxOrXfquarter]

//===----------------------------------------------------------------------===//
// GROUP: Xfaltquarter (pred: HasExtXfaltquarter)
//        alternate quarter-precision floats
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfaltquarter : SubtargetFeature<
  "xfaltquarter", "HasExtXfaltquarter", "true", "'Xfaltquarter' (alternate quarter-precision floats)">;
def HasExtXfaltquarter : Predicate<
  "Subtarget->hasExtXfaltquarter()">, AssemblerPredicate<(all_of FeatureExtXfaltquarter), "'Xfaltquarter' (alternate quarter-precision floats)">;
let Predicates = [HasExtXfaltquarter] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def FCVT_B_B : RVInstR<0b0100011, 0b000, RISCVOpcode<"FCVT_B_B", 0b1010011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "fcvt.b.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }

// Pseudo instructions
def : InstAlias<"flab $rd, ${imm12}(${rs1})",   (FLB FPR16:$rd, GPR:$rs1, simm12:$imm12), 0>;
def : InstAlias<"fsab $rs2, ${imm12}(${rs1})",   (FSB FPR16:$rs2, GPR:$rs1, simm12:$imm12), 0>;
def : InstAlias<"fmadd.ab $rd, $rs1, $rs2, $rs3, $rm",   (FMADD_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, frmarg:$rm), 0>;
def : InstAlias<"fmadd.ab $rd, $rs1, $rs2, $rs3",   (FMADD_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, 0b111), 0>;
def : InstAlias<"fmsub.ab $rd, $rs1, $rs2, $rs3, $rm",   (FMSUB_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, frmarg:$rm), 0>;
def : InstAlias<"fmsub.ab $rd, $rs1, $rs2, $rs3",   (FMSUB_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, 0b111), 0>;
def : InstAlias<"fnmsub.ab $rd, $rs1, $rs2, $rs3, $rm",   (FNMSUB_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, frmarg:$rm), 0>;
def : InstAlias<"fnmsub.ab $rd, $rs1, $rs2, $rs3",   (FNMSUB_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, 0b111), 0>;
def : InstAlias<"fnmadd.ab $rd, $rs1, $rs2, $rs3, $rm",   (FNMADD_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, frmarg:$rm), 0>;
def : InstAlias<"fnmadd.ab $rd, $rs1, $rs2, $rs3",   (FNMADD_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, FPR16:$rs3, 0b111), 0>;
def : InstAlias<"fadd.ab $rd, $rs1, $rs2, $rm",   (FADD_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fadd.ab $rd, $rs1, $rs2",   (FADD_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, 0b111), 0>;
def : InstAlias<"fsub.ab $rd, $rs1, $rs2, $rm",   (FSUB_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fsub.ab $rd, $rs1, $rs2",   (FSUB_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, 0b111), 0>;
def : InstAlias<"fmul.ab $rd, $rs1, $rs2, $rm",   (FMUL_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fmul.ab $rd, $rs1, $rs2",   (FMUL_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, 0b111), 0>;
def : InstAlias<"fdiv.ab $rd, $rs1, $rs2, $rm",   (FDIV_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fdiv.ab $rd, $rs1, $rs2",   (FDIV_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2, 0b111), 0>;
def : InstAlias<"fsqrt.ab $rd, $rs1, $rm",   (FSQRT_B FPR16:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fsqrt.ab $rd, $rs1",   (FSQRT_B FPR16:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fsgnj.ab $rd, $rs1, $rs2",   (FSGNJ_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fsgnjn.ab $rd, $rs1, $rs2",   (FSGNJN_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fsgnjx.ab $rd, $rs1, $rs2",   (FSGNJX_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fmin.ab $rd, $rs1, $rs2",   (FMIN_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fmax.ab $rd, $rs1, $rs2",   (FMAX_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"feq.ab $rd, $rs1, $rs2",   (FEQ_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"flt.ab $rd, $rs1, $rs2",   (FLT_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fle.ab $rd, $rs1, $rs2",   (FLE_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"fcvt.w.ab $rd, $rs1, $rm",   (FCVT_W_B GPR:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.w.ab $rd, $rs1",   (FCVT_W_B GPR:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.wu.ab $rd, $rs1, $rm",   (FCVT_WU_B GPR:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.wu.ab $rd, $rs1",   (FCVT_WU_B GPR:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ab.w $rd, $rs1, $rm",   (FCVT_B_W FPR16:$rd, GPR:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ab.w $rd, $rs1",   (FCVT_B_W FPR16:$rd, GPR:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ab.wu $rd, $rs1, $rm",   (FCVT_B_WU FPR16:$rd, GPR:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ab.wu $rd, $rs1",   (FCVT_B_WU FPR16:$rd, GPR:$rs1, 0b111), 0>;
def : InstAlias<"fmv.x.ab $rd, $rs1",   (FMV_X_B GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fclass.ab $rd, $rs1",   (FCLASS_B GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fmv.ab.x $rd, $rs1",   (FMV_B_X FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"fcvt.l.ab $rd, $rs1, $rm",   (FCVT_L_B GPR:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.l.ab $rd, $rs1",   (FCVT_L_B GPR:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.lu.ab $rd, $rs1, $rm",   (FCVT_LU_B GPR:$rd, FPR16:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.lu.ab $rd, $rs1",   (FCVT_LU_B GPR:$rd, FPR16:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ab.l $rd, $rs1, $rm",   (FCVT_B_L FPR16:$rd, GPR:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ab.l $rd, $rs1",   (FCVT_B_L FPR16:$rd, GPR:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.ab.lu $rd, $rs1, $rm",   (FCVT_B_LU FPR16:$rd, GPR:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ab.lu $rd, $rs1",   (FCVT_B_LU FPR16:$rd, GPR:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.s.ab $rd, $rs1",   (FCVT_S_B FPR32:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fcvt.ab.s $rd, $rs1, $rm",   (FCVT_B_S FPR16:$rd, FPR32:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ab.s $rd, $rs1",   (FCVT_B_S FPR16:$rd, FPR32:$rs1, 0b111), 0>;
def : InstAlias<"fcvt.d.ab $rd, $rs1",   (FCVT_D_B FPR64:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fcvt.ab.d $rd, $rs1, $rm",   (FCVT_B_D FPR16:$rd, FPR64:$rs1, frmarg:$rm), 0>;
def : InstAlias<"fcvt.ab.d $rd, $rs1",   (FCVT_B_D FPR16:$rd, FPR64:$rs1, 0b111), 0>;

// def : InstAlias<"fcvt.h.ab $rd, $rs1",   (FCVT_H_B FPR16:$rd, FPR16:$rs1), 0>;
// def : InstAlias<"fcvt.ab.h $rd, $rs1, $rm",   (FCVT_B_H FPR16:$rd, FPR16:$rs1, frmarg:$rm), 0>;
// def : InstAlias<"fcvt.ab.h $rd, $rs1",   (FCVT_B_H FPR16:$rd, FPR16:$rs1, 0b111), 0>;
// def : InstAlias<"fcvt.ah.ab $rd, $rs1",   (FCVT_H_B FPR16:$rd, FPR16:$rs1), 0>;
// def : InstAlias<"fcvt.ab.ah $rd, $rs1, $rm",   (FCVT_B_H FPR16:$rd, FPR16:$rs1, frmarg:$rm), 0>;
// def : InstAlias<"fcvt.ab.ah $rd, $rs1",   (FCVT_B_H FPR16:$rd, FPR16:$rs1, 0b111), 0>;

def : InstAlias<"fcvt.ab.b $rd, $rs1",   (FCVT_B_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fcvt.b.ab $rd, $rs1",   (FCVT_B_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"fcvt.ab.ab $rd, $rs1",   (FCVT_B_B FPR16:$rd, FPR16:$rs1), 0>;
} // let Predicates = [HasExtXfaltquarter]


//===----------------------------------------------------------------------===//
// GROUP: Xfvecsingle (pred: HasExtXfvecsingle)
//        vectorial single-precision floats - requires FLEN >= 64
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfvecsingle : SubtargetFeature<
  "xfvecsingle", "HasExtXfvecsingle", "true", "'Xfvecsingle' (vectorial single-precision floats - requires FLEN >= 64)">;
def HasExtXfvecsingle : Predicate<
  "Subtarget->hasExtXfvecsingle()">, AssemblerPredicate<(all_of FeatureExtXfvecsingle), "'Xfvecsingle' (vectorial single-precision floats - requires FLEN >= 64)">;
let Predicates = [HasExtXfvecsingle] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFADD_S : RVInstRVf<0b10, 0b00001, 0b0, VFMT_FP32, RISCVOpcode<"VFADD_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfadd.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFADD_R_S : RVInstRVf<0b10, 0b00001, 0b1, VFMT_FP32, RISCVOpcode<"VFADD_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfadd.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSUB_S : RVInstRVf<0b10, 0b00010, 0b0, VFMT_FP32, RISCVOpcode<"VFSUB_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfsub.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSUB_R_S : RVInstRVf<0b10, 0b00010, 0b1, VFMT_FP32, RISCVOpcode<"VFSUB_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfsub.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMUL_S : RVInstRVf<0b10, 0b00011, 0b0, VFMT_FP32, RISCVOpcode<"VFMUL_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmul.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMUL_R_S : RVInstRVf<0b10, 0b00011, 0b1, VFMT_FP32, RISCVOpcode<"VFMUL_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmul.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFDIV_S : RVInstRVf<0b10, 0b00100, 0b0, VFMT_FP32, RISCVOpcode<"VFDIV_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfdiv.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFDIV_R_S : RVInstRVf<0b10, 0b00100, 0b1, VFMT_FP32, RISCVOpcode<"VFDIV_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfdiv.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMIN_S : RVInstRVf<0b10, 0b00101, 0b0, VFMT_FP32, RISCVOpcode<"VFMIN_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmin.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMIN_R_S : RVInstRVf<0b10, 0b00101, 0b1, VFMT_FP32, RISCVOpcode<"VFMIN_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmin.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMAX_S : RVInstRVf<0b10, 0b00110, 0b0, VFMT_FP32, RISCVOpcode<"VFMAX_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmax.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMAX_R_S : RVInstRVf<0b10, 0b00110, 0b1, VFMT_FP32, RISCVOpcode<"VFMAX_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmax.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSQRT_S : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP32, RISCVOpcode<"VFSQRT_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1), "vfsqrt.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMAC_S : RVInstRVf<0b10, 0b01000, 0b0, VFMT_FP32, RISCVOpcode<"VFMAC_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmac.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMAC_R_S : RVInstRVf<0b10, 0b01000, 0b1, VFMT_FP32, RISCVOpcode<"VFMAC_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmac.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMRE_S : RVInstRVf<0b10, 0b01001, 0b0, VFMT_FP32, RISCVOpcode<"VFMRE_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmre.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMRE_R_S : RVInstRVf<0b10, 0b01001, 0b1, VFMT_FP32, RISCVOpcode<"VFMRE_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfmre.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCLASS_S : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP32, RISCVOpcode<"VFCLASS_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1), "vfclass.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00001;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSGNJ_S : RVInstRVf<0b10, 0b01101, 0b0, VFMT_FP32, RISCVOpcode<"VFSGNJ_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfsgnj.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSGNJ_R_S : RVInstRVf<0b10, 0b01101, 0b1, VFMT_FP32, RISCVOpcode<"VFSGNJ_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfsgnj.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSGNJN_S : RVInstRVf<0b10, 0b01110, 0b0, VFMT_FP32, RISCVOpcode<"VFSGNJN_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfsgnjn.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSGNJN_R_S : RVInstRVf<0b10, 0b01110, 0b1, VFMT_FP32, RISCVOpcode<"VFSGNJN_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfsgnjn.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSGNJX_S : RVInstRVf<0b10, 0b01111, 0b0, VFMT_FP32, RISCVOpcode<"VFSGNJX_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfsgnjx.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSGNJX_R_S : RVInstRVf<0b10, 0b01111, 0b1, VFMT_FP32, RISCVOpcode<"VFSGNJX_R_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfsgnjx.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFEQ_S : RVInstRVf<0b10, 0b10000, 0b0, VFMT_FP32, RISCVOpcode<"VFEQ_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfeq.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFEQ_R_S : RVInstRVf<0b10, 0b10000, 0b1, VFMT_FP32, RISCVOpcode<"VFEQ_R_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfeq.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFNE_S : RVInstRVf<0b10, 0b10001, 0b0, VFMT_FP32, RISCVOpcode<"VFNE_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfne.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFNE_R_S : RVInstRVf<0b10, 0b10001, 0b1, VFMT_FP32, RISCVOpcode<"VFNE_R_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfne.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFLT_S : RVInstRVf<0b10, 0b10010, 0b0, VFMT_FP32, RISCVOpcode<"VFLT_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vflt.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFLT_R_S : RVInstRVf<0b10, 0b10010, 0b1, VFMT_FP32, RISCVOpcode<"VFLT_R_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vflt.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFGE_S : RVInstRVf<0b10, 0b10011, 0b0, VFMT_FP32, RISCVOpcode<"VFGE_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfge.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFGE_R_S : RVInstRVf<0b10, 0b10011, 0b1, VFMT_FP32, RISCVOpcode<"VFGE_R_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfge.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFLE_S : RVInstRVf<0b10, 0b10100, 0b0, VFMT_FP32, RISCVOpcode<"VFLE_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfle.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFLE_R_S : RVInstRVf<0b10, 0b10100, 0b1, VFMT_FP32, RISCVOpcode<"VFLE_R_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfle.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFGT_S : RVInstRVf<0b10, 0b10101, 0b0, VFMT_FP32, RISCVOpcode<"VFGT_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfgt.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFGT_R_S : RVInstRVf<0b10, 0b10101, 0b1, VFMT_FP32, RISCVOpcode<"VFGT_R_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfgt.r.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMV_X_S : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP32, RISCVOpcode<"VFMV_X_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1), "vfmv.x.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFMV_S_X : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP32, RISCVOpcode<"VFMV_S_X", 0b0110011>,
             (outs FPR32:$rd), (ins GPR:$rs1), "vfmv.s.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCVT_X_S : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP32, RISCVOpcode<"VFCVT_X_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1), "vfcvt.x.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCVT_XU_S : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP32, RISCVOpcode<"VFCVT_XU_S", 0b0110011>,
             (outs GPR:$rd), (ins FPR32:$rs1), "vfcvt.xu.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCVT_S_X : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP32, RISCVOpcode<"VFCVT_S_X", 0b0110011>,
             (outs FPR32:$rd), (ins GPR:$rs1), "vfcvt.s.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCVT_S_XU : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP32, RISCVOpcode<"VFCVT_S_XU", 0b0110011>,
             (outs FPR32:$rd), (ins GPR:$rs1), "vfcvt.s.xu", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCPKA_S_S : RVInstRVf<0b10, 0b11000, 0b0, VFMT_FP32, RISCVOpcode<"VFCPKA_S_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpka.s.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCPKB_S_S : RVInstRVf<0b10, 0b11000, 0b1, VFMT_FP32, RISCVOpcode<"VFCPKB_S_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkb.s.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCPKC_S_S : RVInstRVf<0b10, 0b11001, 0b0, VFMT_FP32, RISCVOpcode<"VFCPKC_S_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkc.s.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCPKD_S_S : RVInstRVf<0b10, 0b11001, 0b1, VFMT_FP32, RISCVOpcode<"VFCPKD_S_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkd.s.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCPKA_S_D : RVInstRVf<0b10, 0b11010, 0b0, VFMT_FP32, RISCVOpcode<"VFCPKA_S_D", 0b0110011>,
             (outs FPR32:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpka.s.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCPKB_S_D : RVInstRVf<0b10, 0b11010, 0b1, VFMT_FP32, RISCVOpcode<"VFCPKB_S_D", 0b0110011>,
             (outs FPR32:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkb.s.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCPKC_S_D : RVInstRVf<0b10, 0b11011, 0b0, VFMT_FP32, RISCVOpcode<"VFCPKC_S_D", 0b0110011>,
             (outs FPR32:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkc.s.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCPKD_S_D : RVInstRVf<0b10, 0b11011, 0b1, VFMT_FP32, RISCVOpcode<"VFCPKD_S_D", 0b0110011>,
             (outs FPR32:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkd.s.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCVT_H_H : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16, RISCVOpcode<"VFCVT_H_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfcvt.h.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00101;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFCVTU_H_H : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16, RISCVOpcode<"VFCVTU_H_H", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvtu.h.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00101;
  }

// Pseudo instructions
def : InstAlias<"vfcvt.h.ah $rd, $rs1",   (VFCVT_H_H FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvt.ah.h $rd, $rs1",   (VFCVT_H_H FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.h.ah $rd, $rs1",   (VFCVTU_H_H FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvtu.ah.h $rd, $rs1",   (VFCVTU_H_H FPR16:$rd, GPR:$rs1), 0>;
} // let Predicates = [HasExtXfvecsingle]


//===----------------------------------------------------------------------===//
// GROUP: Xfvechalf (pred: HasExtXfvechalf)
//        vectorial half-precision floats - requires FLEN >= 32
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfvechalf : SubtargetFeature<
  "xfvechalf", "HasExtXfvechalf", "true", "'Xfvechalf' (vectorial half-precision floats - requires FLEN >= 32)">;
def HasExtXfvechalf : Predicate<
  "Subtarget->hasExtXfvechalf()">, AssemblerPredicate<(all_of FeatureExtXfvechalf), "'Xfvechalf' (vectorial half-precision floats - requires FLEN >= 32)">;

def FeatureExtZvechalfinx : SubtargetFeature<
  "zvechalfinx", "HasExtZvechalfinx", "true", "'Zvechalfinx' (vectorial half-precision floats in integer registers)", [FeatureStdExtZfinx]>;
def HasExtZvechalfinx : Predicate<
  "Subtarget->hasExtZvechalfinx()">, AssemblerPredicate<(all_of FeatureExtZvechalfinx), "'Zvechalfinx' (vectorial half-precision floats in integer registers)">;

let Predicates = [HasExtXfvechalf] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFADD_H : RVInstRVf<0b10, 0b00001, 0b0, VFMT_FP16, RISCVOpcode<"VFADD_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfadd.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFADD_R_H : RVInstRVf<0b10, 0b00001, 0b1, VFMT_FP16, RISCVOpcode<"VFADD_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfadd.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSUB_H : RVInstRVf<0b10, 0b00010, 0b0, VFMT_FP16, RISCVOpcode<"VFSUB_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsub.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSUB_R_H : RVInstRVf<0b10, 0b00010, 0b1, VFMT_FP16, RISCVOpcode<"VFSUB_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsub.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMUL_H : RVInstRVf<0b10, 0b00011, 0b0, VFMT_FP16, RISCVOpcode<"VFMUL_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmul.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMUL_R_H : RVInstRVf<0b10, 0b00011, 0b1, VFMT_FP16, RISCVOpcode<"VFMUL_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmul.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFDIV_H : RVInstRVf<0b10, 0b00100, 0b0, VFMT_FP16, RISCVOpcode<"VFDIV_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdiv.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFDIV_R_H : RVInstRVf<0b10, 0b00100, 0b1, VFMT_FP16, RISCVOpcode<"VFDIV_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdiv.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMIN_H : RVInstRVf<0b10, 0b00101, 0b0, VFMT_FP16, RISCVOpcode<"VFMIN_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmin.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMIN_R_H : RVInstRVf<0b10, 0b00101, 0b1, VFMT_FP16, RISCVOpcode<"VFMIN_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmin.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMAX_H : RVInstRVf<0b10, 0b00110, 0b0, VFMT_FP16, RISCVOpcode<"VFMAX_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmax.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMAX_R_H : RVInstRVf<0b10, 0b00110, 0b1, VFMT_FP16, RISCVOpcode<"VFMAX_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmax.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSQRT_H : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP16, RISCVOpcode<"VFSQRT_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfsqrt.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMAC_H : RVInstRVf<0b10, 0b01000, 0b0, VFMT_FP16, RISCVOpcode<"VFMAC_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmac.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMAC_R_H : RVInstRVf<0b10, 0b01000, 0b1, VFMT_FP16, RISCVOpcode<"VFMAC_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmac.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMRE_H : RVInstRVf<0b10, 0b01001, 0b0, VFMT_FP16, RISCVOpcode<"VFMRE_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmre.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMRE_R_H : RVInstRVf<0b10, 0b01001, 0b1, VFMT_FP16, RISCVOpcode<"VFMRE_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmre.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCLASS_H : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16, RISCVOpcode<"VFCLASS_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1), "vfclass.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00001;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJ_H : RVInstRVf<0b10, 0b01101, 0b0, VFMT_FP16, RISCVOpcode<"VFSGNJ_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnj.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJ_R_H : RVInstRVf<0b10, 0b01101, 0b1, VFMT_FP16, RISCVOpcode<"VFSGNJ_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnj.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJN_H : RVInstRVf<0b10, 0b01110, 0b0, VFMT_FP16, RISCVOpcode<"VFSGNJN_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnjn.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJN_R_H : RVInstRVf<0b10, 0b01110, 0b1, VFMT_FP16, RISCVOpcode<"VFSGNJN_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnjn.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJX_H : RVInstRVf<0b10, 0b01111, 0b0, VFMT_FP16, RISCVOpcode<"VFSGNJX_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnjx.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJX_R_H : RVInstRVf<0b10, 0b01111, 0b1, VFMT_FP16, RISCVOpcode<"VFSGNJX_R_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnjx.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFEQ_H : RVInstRVf<0b10, 0b10000, 0b0, VFMT_FP16, RISCVOpcode<"VFEQ_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfeq.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFEQ_R_H : RVInstRVf<0b10, 0b10000, 0b1, VFMT_FP16, RISCVOpcode<"VFEQ_R_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfeq.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFNE_H : RVInstRVf<0b10, 0b10001, 0b0, VFMT_FP16, RISCVOpcode<"VFNE_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfne.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFNE_R_H : RVInstRVf<0b10, 0b10001, 0b1, VFMT_FP16, RISCVOpcode<"VFNE_R_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfne.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFLT_H : RVInstRVf<0b10, 0b10010, 0b0, VFMT_FP16, RISCVOpcode<"VFLT_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vflt.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFLT_R_H : RVInstRVf<0b10, 0b10010, 0b1, VFMT_FP16, RISCVOpcode<"VFLT_R_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vflt.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFGE_H : RVInstRVf<0b10, 0b10011, 0b0, VFMT_FP16, RISCVOpcode<"VFGE_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfge.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFGE_R_H : RVInstRVf<0b10, 0b10011, 0b1, VFMT_FP16, RISCVOpcode<"VFGE_R_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfge.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFLE_H : RVInstRVf<0b10, 0b10100, 0b0, VFMT_FP16, RISCVOpcode<"VFLE_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfle.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFLE_R_H : RVInstRVf<0b10, 0b10100, 0b1, VFMT_FP16, RISCVOpcode<"VFLE_R_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfle.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFGT_H : RVInstRVf<0b10, 0b10101, 0b0, VFMT_FP16, RISCVOpcode<"VFGT_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfgt.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFGT_R_H : RVInstRVf<0b10, 0b10101, 0b1, VFMT_FP16, RISCVOpcode<"VFGT_R_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfgt.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMV_X_H : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16, RISCVOpcode<"VFMV_X_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1), "vfmv.x.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMV_H_X : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16, RISCVOpcode<"VFMV_H_X", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfmv.h.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_X_H : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16, RISCVOpcode<"VFCVT_X_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1), "vfcvt.x.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_XU_H : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16, RISCVOpcode<"VFCVT_XU_H", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1), "vfcvt.xu.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_H_X : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16, RISCVOpcode<"VFCVT_H_X", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvt.h.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_H_XU : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16, RISCVOpcode<"VFCVT_H_XU", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvt.h.xu", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKA_H_S : RVInstRVf<0b10, 0b11000, 0b0, VFMT_FP16, RISCVOpcode<"VFCPKA_H_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpka.h.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKB_H_S : RVInstRVf<0b10, 0b11000, 0b1, VFMT_FP16, RISCVOpcode<"VFCPKB_H_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkb.h.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKC_H_S : RVInstRVf<0b10, 0b11001, 0b0, VFMT_FP16, RISCVOpcode<"VFCPKC_H_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkc.h.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKD_H_S : RVInstRVf<0b10, 0b11001, 0b1, VFMT_FP16, RISCVOpcode<"VFCPKD_H_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkd.h.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKA_H_D : RVInstRVf<0b10, 0b11010, 0b0, VFMT_FP16, RISCVOpcode<"VFCPKA_H_D", 0b0110011>,
             (outs FPR16:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpka.h.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKB_H_D : RVInstRVf<0b10, 0b11010, 0b1, VFMT_FP16, RISCVOpcode<"VFCPKB_H_D", 0b0110011>,
             (outs FPR16:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkb.h.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKC_H_D : RVInstRVf<0b10, 0b11011, 0b0, VFMT_FP16, RISCVOpcode<"VFCPKC_H_D", 0b0110011>,
             (outs FPR16:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkc.h.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKD_H_D : RVInstRVf<0b10, 0b11011, 0b1, VFMT_FP16, RISCVOpcode<"VFCPKD_H_D", 0b0110011>,
             (outs FPR16:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkd.h.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_S_H : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP32, RISCVOpcode<"VFCVT_S_H", 0b0110011>,
             (outs FPR32:$rd), (ins FPR16:$rs1), "vfcvt.s.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVTU_S_H : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP32, RISCVOpcode<"VFCVTU_S_H", 0b0110011>,
             (outs FPR32:$rd), (ins GPR:$rs1), "vfcvtu.s.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_H_S : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16, RISCVOpcode<"VFCVT_H_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1), "vfcvt.h.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00100;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVTU_H_S : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16, RISCVOpcode<"VFCVTU_H_S", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvtu.h.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00100;
  }

// Pseudo instructions
} // let Predicates = [HasExtXfvechalf]


let Predicates = [HasExtZvechalfinx] in {
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
  def VFADD_H_INX : RVInstRVf<0b10, 0b00001, 0b0, VFMT_FP16INX, RISCVOpcode<"VFADD_H_INX", 0b0110011>,
               (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfadd.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFADD_R_H_INX : RVInstRVf<0b10, 0b00001, 0b1, VFMT_FP16INX, RISCVOpcode<"VFADD_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfadd.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSUB_H_INX : RVInstRVf<0b10, 0b00010, 0b0, VFMT_FP16INX, RISCVOpcode<"VFSUB_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsub.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSUB_R_H_INX : RVInstRVf<0b10, 0b00010, 0b1, VFMT_FP16INX, RISCVOpcode<"VFSUB_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsub.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMUL_H_INX : RVInstRVf<0b10, 0b00011, 0b0, VFMT_FP16INX, RISCVOpcode<"VFMUL_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmul.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMUL_R_H_INX : RVInstRVf<0b10, 0b00011, 0b1, VFMT_FP16INX, RISCVOpcode<"VFMUL_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmul.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDIV_H_INX : RVInstRVf<0b10, 0b00100, 0b0, VFMT_FP16INX, RISCVOpcode<"VFDIV_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdiv.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDIV_R_H_INX : RVInstRVf<0b10, 0b00100, 0b1, VFMT_FP16INX, RISCVOpcode<"VFDIV_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdiv.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMIN_H_INX : RVInstRVf<0b10, 0b00101, 0b0, VFMT_FP16INX, RISCVOpcode<"VFMIN_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmin.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMIN_R_H_INX : RVInstRVf<0b10, 0b00101, 0b1, VFMT_FP16INX, RISCVOpcode<"VFMIN_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmin.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMAX_H_INX : RVInstRVf<0b10, 0b00110, 0b0, VFMT_FP16INX, RISCVOpcode<"VFMAX_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmax.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMAX_R_H_INX : RVInstRVf<0b10, 0b00110, 0b1, VFMT_FP16INX, RISCVOpcode<"VFMAX_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmax.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSQRT_H_INX : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP16INX, RISCVOpcode<"VFSQRT_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1), "vfsqrt.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMAC_H_INX : RVInstRVf<0b10, 0b01000, 0b0, VFMT_FP16INX, RISCVOpcode<"VFMAC_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmac.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMAC_R_H_INX : RVInstRVf<0b10, 0b01000, 0b1, VFMT_FP16INX, RISCVOpcode<"VFMAC_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmac.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMRE_H_INX : RVInstRVf<0b10, 0b01001, 0b0, VFMT_FP16INX, RISCVOpcode<"VFMRE_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmre.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMRE_R_H_INX : RVInstRVf<0b10, 0b01001, 0b1, VFMT_FP16INX, RISCVOpcode<"VFMRE_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmre.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCLASS_H_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16INX, RISCVOpcode<"VFCLASS_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1), "vfclass.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00001;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJ_H_INX : RVInstRVf<0b10, 0b01101, 0b0, VFMT_FP16INX, RISCVOpcode<"VFSGNJ_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnj.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJ_R_H_INX : RVInstRVf<0b10, 0b01101, 0b1, VFMT_FP16INX, RISCVOpcode<"VFSGNJ_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnj.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJN_H_INX : RVInstRVf<0b10, 0b01110, 0b0, VFMT_FP16INX, RISCVOpcode<"VFSGNJN_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnjn.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJN_R_H_INX : RVInstRVf<0b10, 0b01110, 0b1, VFMT_FP16INX, RISCVOpcode<"VFSGNJN_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnjn.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJX_H_INX : RVInstRVf<0b10, 0b01111, 0b0, VFMT_FP16INX, RISCVOpcode<"VFSGNJX_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnjx.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJX_R_H_INX : RVInstRVf<0b10, 0b01111, 0b1, VFMT_FP16INX, RISCVOpcode<"VFSGNJX_R_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnjx.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFEQ_H_INX : RVInstRVf<0b10, 0b10000, 0b0, VFMT_FP16INX, RISCVOpcode<"VFEQ_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfeq.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFEQ_R_H_INX : RVInstRVf<0b10, 0b10000, 0b1, VFMT_FP16INX, RISCVOpcode<"VFEQ_R_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfeq.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNE_H_INX : RVInstRVf<0b10, 0b10001, 0b0, VFMT_FP16INX, RISCVOpcode<"VFNE_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfne.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNE_R_H_INX : RVInstRVf<0b10, 0b10001, 0b1, VFMT_FP16INX, RISCVOpcode<"VFNE_R_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfne.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFLT_H_INX : RVInstRVf<0b10, 0b10010, 0b0, VFMT_FP16INX, RISCVOpcode<"VFLT_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vflt.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFLT_R_H_INX : RVInstRVf<0b10, 0b10010, 0b1, VFMT_FP16INX, RISCVOpcode<"VFLT_R_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vflt.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFGE_H_INX : RVInstRVf<0b10, 0b10011, 0b0, VFMT_FP16INX, RISCVOpcode<"VFGE_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfge.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFGE_R_H_INX : RVInstRVf<0b10, 0b10011, 0b1, VFMT_FP16INX, RISCVOpcode<"VFGE_R_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfge.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFLE_H_INX : RVInstRVf<0b10, 0b10100, 0b0, VFMT_FP16INX, RISCVOpcode<"VFLE_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfle.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFLE_R_H_INX : RVInstRVf<0b10, 0b10100, 0b1, VFMT_FP16INX, RISCVOpcode<"VFLE_R_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfle.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFGT_H_INX : RVInstRVf<0b10, 0b10101, 0b0, VFMT_FP16INX, RISCVOpcode<"VFGT_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfgt.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFGT_R_H_INX : RVInstRVf<0b10, 0b10101, 0b1, VFMT_FP16INX, RISCVOpcode<"VFGT_R_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfgt.r.h", "$rd, $rs1, $rs2">, Sched<[]>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMV_X_H_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16INX, RISCVOpcode<"VFMV_X_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1), "vfmv.x.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMV_H_X_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16INX, RISCVOpcode<"VFMV_H_X_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfmv.h.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_X_H_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16INX, RISCVOpcode<"VFCVT_X_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1), "vfcvt.x.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_XU_H_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16INX, RISCVOpcode<"VFCVT_XU_H_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1), "vfcvt.xu.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_H_X_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16INX, RISCVOpcode<"VFCVT_H_X_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfcvt.h.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_H_XU_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16INX, RISCVOpcode<"VFCVT_H_XU_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfcvt.h.xu", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCPKA_H_S_INX : RVInstRVf<0b10, 0b11000, 0b0, VFMT_FP16INX, RISCVOpcode<"VFCPKA_H_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfcpka.h.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCPKB_H_S_INX : RVInstRVf<0b10, 0b11000, 0b1, VFMT_FP16INX, RISCVOpcode<"VFCPKB_H_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfcpkb.h.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCPKC_H_S_INX : RVInstRVf<0b10, 0b11001, 0b0, VFMT_FP16INX, RISCVOpcode<"VFCPKC_H_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfcpkc.h.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCPKD_H_S_INX : RVInstRVf<0b10, 0b11001, 0b1, VFMT_FP16INX, RISCVOpcode<"VFCPKD_H_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfcpkd.h.s", "$rd, $rs1, $rs2">, Sched<[]>;

} // let Predicates = [HasExtZvechalfinx]

//===----------------------------------------------------------------------===//
// GROUP: Xfvecalthalf (pred: HasExtXfvecalthalf)
//        vectorial alternate half-precision floats - requires FLEN >= 32
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfvecalthalf : SubtargetFeature<
  "xfvecalthalf", "HasExtXfvecalthalf", "true", "'Xfvecalthalf' (vectorial alternate half-precision floats - requires FLEN >= 32)">;
def HasExtXfvecalthalf : Predicate<
  "Subtarget->hasExtXfvecalthalf()">, AssemblerPredicate<(all_of FeatureExtXfvecalthalf), "'Xfvecalthalf' (vectorial alternate half-precision floats - requires FLEN >= 32)">;
let Predicates = [HasExtXfvecalthalf] in {

// Instructions

// Pseudo instructions
def : InstAlias<"vfadd.ah $rd, $rs1, $rs2",   (VFADD_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfadd.r.ah $rd, $rs1, $rs2",   (VFADD_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsub.ah $rd, $rs1, $rs2",   (VFSUB_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsub.r.ah $rd, $rs1, $rs2",   (VFSUB_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmul.ah $rd, $rs1, $rs2",   (VFMUL_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmul.r.ah $rd, $rs1, $rs2",   (VFMUL_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdiv.ah $rd, $rs1, $rs2",   (VFDIV_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdiv.r.ah $rd, $rs1, $rs2",   (VFDIV_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmin.ah $rd, $rs1, $rs2",   (VFMIN_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmin.r.ah $rd, $rs1, $rs2",   (VFMIN_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmax.ah $rd, $rs1, $rs2",   (VFMAX_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmax.r.ah $rd, $rs1, $rs2",   (VFMAX_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsqrt.ah $rd, $rs1",   (VFSQRT_H FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfmac.ah $rd, $rs1, $rs2",   (VFMAC_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmac.r.ah $rd, $rs1, $rs2",   (VFMAC_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmre.ah $rd, $rs1, $rs2",   (VFMRE_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmre.r.ah $rd, $rs1, $rs2",   (VFMRE_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfclass.ah $rd, $rs1",   (VFCLASS_H GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfsgnj.ah $rd, $rs1, $rs2",   (VFSGNJ_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnj.r.ah $rd, $rs1, $rs2",   (VFSGNJ_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnjn.ah $rd, $rs1, $rs2",   (VFSGNJN_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnjn.r.ah $rd, $rs1, $rs2",   (VFSGNJN_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnjx.ah $rd, $rs1, $rs2",   (VFSGNJX_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnjx.r.ah $rd, $rs1, $rs2",   (VFSGNJX_R_H FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfeq.ah $rd, $rs1, $rs2",   (VFEQ_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfeq.r.ah $rd, $rs1, $rs2",   (VFEQ_R_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfne.ah $rd, $rs1, $rs2",   (VFNE_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfne.r.ah $rd, $rs1, $rs2",   (VFNE_R_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vflt.ah $rd, $rs1, $rs2",   (VFLT_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vflt.r.ah $rd, $rs1, $rs2",   (VFLT_R_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfge.ah $rd, $rs1, $rs2",   (VFGE_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfge.r.ah $rd, $rs1, $rs2",   (VFGE_R_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfle.ah $rd, $rs1, $rs2",   (VFLE_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfle.r.ah $rd, $rs1, $rs2",   (VFLE_R_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfgt.ah $rd, $rs1, $rs2",   (VFGT_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfgt.r.ah $rd, $rs1, $rs2",   (VFGT_R_H GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmv.x.ah $rd, $rs1",   (VFMV_X_H GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfmv.ah.x $rd, $rs1",   (VFMV_H_X FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.x.ah $rd, $rs1",   (VFCVT_X_H GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvt.xu.ah $rd, $rs1",   (VFCVT_XU_H GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvt.ah.x $rd, $rs1",   (VFCVT_H_X FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.ah.xu $rd, $rs1",   (VFCVT_H_XU FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcpka.ah.s $rd, $rs1, $rs2",   (VFCPKA_H_S FPR16:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfcpkb.ah.s $rd, $rs1, $rs2",   (VFCPKB_H_S FPR16:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfcpkc.ah.s $rd, $rs1, $rs2",   (VFCPKC_H_S FPR16:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfcpkd.ah.s $rd, $rs1, $rs2",   (VFCPKD_H_S FPR16:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfcpka.ah.d $rd, $rs1, $rs2",   (VFCPKA_H_D FPR16:$rd, FPR64:$rs1, FPR64:$rs2), 0>;
def : InstAlias<"vfcpkb.ah.d $rd, $rs1, $rs2",   (VFCPKB_H_D FPR16:$rd, FPR64:$rs1, FPR64:$rs2), 0>;
def : InstAlias<"vfcpkc.ah.d $rd, $rs1, $rs2",   (VFCPKC_H_D FPR16:$rd, FPR64:$rs1, FPR64:$rs2), 0>;
def : InstAlias<"vfcpkd.ah.d $rd, $rs1, $rs2",   (VFCPKD_H_D FPR16:$rd, FPR64:$rs1, FPR64:$rs2), 0>;
def : InstAlias<"vfcvt.s.ah $rd, $rs1",   (VFCVT_S_H FPR32:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.s.ah $rd, $rs1",   (VFCVTU_S_H FPR32:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.ah.s $rd, $rs1",   (VFCVT_H_S FPR16:$rd, FPR32:$rs1), 0>;
def : InstAlias<"vfcvtu.ah.s $rd, $rs1",   (VFCVTU_H_S FPR16:$rd, GPR:$rs1), 0>;
} // let Predicates = [HasExtXfvecalthalf]


//===----------------------------------------------------------------------===//
// GROUP: Xfvecquarter (pred: HasExtXfvecquarter)
//        vectorial quarter-precision floats - requires FLEN >= 16
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfvecquarter : SubtargetFeature<
  "xfvecquarter", "HasExtXfvecquarter", "true", "'Xfvecquarter' (vectorial quarter-precision floats - requires FLEN >= 16)">;
def HasExtXfvecquarter : Predicate<
  "Subtarget->hasExtXfvecquarter()">, AssemblerPredicate<(all_of FeatureExtXfvecquarter), "'Xfvecquarter' (vectorial quarter-precision floats - requires FLEN >= 16)">;

// Subtarget definitions
def FeatureExtZvecquarterinx : SubtargetFeature<
  "zvecquarterinx", "HasExtZvecquarterinx", "true", "'Zvecquarterinx' (vectorial quarter-precision floats - requires FLEN >= 16)">;
def HasExtZvecquarterinx : Predicate<
  "Subtarget->hasExtZvecquarterinx()">, AssemblerPredicate<(all_of FeatureExtZvecquarterinx), "'Zvecquarterinx' (vectorial quarter-precision floats - requires FLEN >= 16)">;

let Predicates = [HasExtXfvecquarter] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFADD_B : RVInstRVf<0b10, 0b00001, 0b0, VFMT_FP8, RISCVOpcode<"VFADD_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfadd.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFADD_R_B : RVInstRVf<0b10, 0b00001, 0b1, VFMT_FP8, RISCVOpcode<"VFADD_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfadd.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSUB_B : RVInstRVf<0b10, 0b00010, 0b0, VFMT_FP8, RISCVOpcode<"VFSUB_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsub.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSUB_R_B : RVInstRVf<0b10, 0b00010, 0b1, VFMT_FP8, RISCVOpcode<"VFSUB_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsub.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMUL_B : RVInstRVf<0b10, 0b00011, 0b0, VFMT_FP8, RISCVOpcode<"VFMUL_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmul.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMUL_R_B : RVInstRVf<0b10, 0b00011, 0b1, VFMT_FP8, RISCVOpcode<"VFMUL_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmul.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFDIV_B : RVInstRVf<0b10, 0b00100, 0b0, VFMT_FP8, RISCVOpcode<"VFDIV_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdiv.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFDIV_R_B : RVInstRVf<0b10, 0b00100, 0b1, VFMT_FP8, RISCVOpcode<"VFDIV_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdiv.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMIN_B : RVInstRVf<0b10, 0b00101, 0b0, VFMT_FP8, RISCVOpcode<"VFMIN_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmin.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMIN_R_B : RVInstRVf<0b10, 0b00101, 0b1, VFMT_FP8, RISCVOpcode<"VFMIN_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmin.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMAX_B : RVInstRVf<0b10, 0b00110, 0b0, VFMT_FP8, RISCVOpcode<"VFMAX_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmax.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMAX_R_B : RVInstRVf<0b10, 0b00110, 0b1, VFMT_FP8, RISCVOpcode<"VFMAX_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmax.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSQRT_B : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP8, RISCVOpcode<"VFSQRT_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfsqrt.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMAC_B : RVInstRVf<0b10, 0b01000, 0b0, VFMT_FP8, RISCVOpcode<"VFMAC_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmac.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMAC_R_B : RVInstRVf<0b10, 0b01000, 0b1, VFMT_FP8, RISCVOpcode<"VFMAC_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmac.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMRE_B : RVInstRVf<0b10, 0b01001, 0b0, VFMT_FP8, RISCVOpcode<"VFMRE_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmre.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMRE_R_B : RVInstRVf<0b10, 0b01001, 0b1, VFMT_FP8, RISCVOpcode<"VFMRE_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfmre.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJ_B : RVInstRVf<0b10, 0b01101, 0b0, VFMT_FP8, RISCVOpcode<"VFSGNJ_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnj.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJ_R_B : RVInstRVf<0b10, 0b01101, 0b1, VFMT_FP8, RISCVOpcode<"VFSGNJ_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnj.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJN_B : RVInstRVf<0b10, 0b01110, 0b0, VFMT_FP8, RISCVOpcode<"VFSGNJN_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnjn.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJN_R_B : RVInstRVf<0b10, 0b01110, 0b1, VFMT_FP8, RISCVOpcode<"VFSGNJN_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnjn.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJX_B : RVInstRVf<0b10, 0b01111, 0b0, VFMT_FP8, RISCVOpcode<"VFSGNJX_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnjx.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSGNJX_R_B : RVInstRVf<0b10, 0b01111, 0b1, VFMT_FP8, RISCVOpcode<"VFSGNJX_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfsgnjx.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFEQ_B : RVInstRVf<0b10, 0b10000, 0b0, VFMT_FP8, RISCVOpcode<"VFEQ_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfeq.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFEQ_R_B : RVInstRVf<0b10, 0b10000, 0b1, VFMT_FP8, RISCVOpcode<"VFEQ_R_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfeq.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFNE_B : RVInstRVf<0b10, 0b10001, 0b0, VFMT_FP8, RISCVOpcode<"VFNE_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfne.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFNE_R_B : RVInstRVf<0b10, 0b10001, 0b1, VFMT_FP8, RISCVOpcode<"VFNE_R_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfne.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFLT_B : RVInstRVf<0b10, 0b10010, 0b0, VFMT_FP8, RISCVOpcode<"VFLT_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vflt.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFLT_R_B : RVInstRVf<0b10, 0b10010, 0b1, VFMT_FP8, RISCVOpcode<"VFLT_R_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vflt.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFGE_B : RVInstRVf<0b10, 0b10011, 0b0, VFMT_FP8, RISCVOpcode<"VFGE_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfge.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFGE_R_B : RVInstRVf<0b10, 0b10011, 0b1, VFMT_FP8, RISCVOpcode<"VFGE_R_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfge.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFLE_B : RVInstRVf<0b10, 0b10100, 0b0, VFMT_FP8, RISCVOpcode<"VFLE_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfle.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFLE_R_B : RVInstRVf<0b10, 0b10100, 0b1, VFMT_FP8, RISCVOpcode<"VFLE_R_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfle.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFGT_B : RVInstRVf<0b10, 0b10101, 0b0, VFMT_FP8, RISCVOpcode<"VFGT_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfgt.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFGT_R_B : RVInstRVf<0b10, 0b10101, 0b1, VFMT_FP8, RISCVOpcode<"VFGT_R_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfgt.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMV_X_B : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8, RISCVOpcode<"VFMV_X_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1), "vfmv.x.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFMV_B_X : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8, RISCVOpcode<"VFMV_B_X", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfmv.b.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCLASS_B : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8, RISCVOpcode<"VFCLASS_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1), "vfclass.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00001;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_X_B : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8, RISCVOpcode<"VFCVT_X_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1), "vfcvt.x.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_XU_B : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8, RISCVOpcode<"VFCVT_XU_B", 0b0110011>,
             (outs GPR:$rd), (ins FPR16:$rs1), "vfcvt.xu.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_B_X : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8, RISCVOpcode<"VFCVT_B_X", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvt.b.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_B_XU : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8, RISCVOpcode<"VFCVT_B_XU", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvt.b.xu", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKA_B_S : RVInstRVf<0b10, 0b11000, 0b0, VFMT_FP8, RISCVOpcode<"VFCPKA_B_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpka.b.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKB_B_S : RVInstRVf<0b10, 0b11000, 0b1, VFMT_FP8, RISCVOpcode<"VFCPKB_B_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkb.b.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKC_B_S : RVInstRVf<0b10, 0b11001, 0b0, VFMT_FP8, RISCVOpcode<"VFCPKC_B_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkc.b.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKD_B_S : RVInstRVf<0b10, 0b11001, 0b1, VFMT_FP8, RISCVOpcode<"VFCPKD_B_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfcpkd.b.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKA_B_D : RVInstRVf<0b10, 0b11010, 0b0, VFMT_FP8, RISCVOpcode<"VFCPKA_B_D", 0b0110011>,
             (outs FPR16:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpka.b.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKB_B_D : RVInstRVf<0b10, 0b11010, 0b1, VFMT_FP8, RISCVOpcode<"VFCPKB_B_D", 0b0110011>,
             (outs FPR16:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkb.b.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKC_B_D : RVInstRVf<0b10, 0b11011, 0b0, VFMT_FP8, RISCVOpcode<"VFCPKC_B_D", 0b0110011>,
             (outs FPR16:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkc.b.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCPKD_B_D : RVInstRVf<0b10, 0b11011, 0b1, VFMT_FP8, RISCVOpcode<"VFCPKD_B_D", 0b0110011>,
             (outs FPR16:$rd), (ins FPR64:$rs1, FPR64:$rs2), "vfcpkd.b.d", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_S_B : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP32, RISCVOpcode<"VFCVT_S_B", 0b0110011>,
             (outs FPR32:$rd), (ins FPR16:$rs1), "vfcvt.s.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVTU_S_B : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP32, RISCVOpcode<"VFCVTU_S_B", 0b0110011>,
             (outs FPR32:$rd), (ins GPR:$rs1), "vfcvtu.s.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_B_S : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8, RISCVOpcode<"VFCVT_B_S", 0b0110011>,
             (outs FPR16:$rd), (ins FPR32:$rs1), "vfcvt.b.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00100;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVTU_B_S : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8, RISCVOpcode<"VFCVTU_B_S", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvtu.b.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00100;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_H_B : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16, RISCVOpcode<"VFCVT_H_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfcvt.h.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVTU_H_B : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16, RISCVOpcode<"VFCVTU_H_B", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvtu.h.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_B_H : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8, RISCVOpcode<"VFCVT_B_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfcvt.b.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVTU_B_H : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8, RISCVOpcode<"VFCVTU_B_H", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvtu.b.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVT_B_B : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8, RISCVOpcode<"VFCVT_B_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfcvt.b.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFCVTU_B_B : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8, RISCVOpcode<"VFCVTU_B_B", 0b0110011>,
             (outs FPR16:$rd), (ins GPR:$rs1), "vfcvtu.b.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }

// Pseudo instructions
def : InstAlias<"vfcvt.ah.b $rd, $rs1",   (VFCVT_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.ah.b $rd, $rs1",   (VFCVTU_H_B FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.b.ah $rd, $rs1",   (VFCVT_B_H FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.b.ah $rd, $rs1",   (VFCVTU_B_H FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.ab.b $rd, $rs1",   (VFCVT_B_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvt.b.ab $rd, $rs1",   (VFCVT_B_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.ab.b $rd, $rs1",   (VFCVTU_B_B FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvtu.b.ab $rd, $rs1",   (VFCVTU_B_B FPR16:$rd, GPR:$rs1), 0>;
} // let Predicates = [HasExtXfvecquarter]

let Predicates = [HasExtZvecquarterinx] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFADD_B_INX : RVInstRVf<0b10, 0b00001, 0b0, VFMT_FP8INX, RISCVOpcode<"VFADD_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfadd.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFADD_R_B_INX : RVInstRVf<0b10, 0b00001, 0b1, VFMT_FP8INX, RISCVOpcode<"VFADD_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfadd.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSUB_B_INX : RVInstRVf<0b10, 0b00010, 0b0, VFMT_FP8INX, RISCVOpcode<"VFSUB_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsub.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSUB_R_B_INX : RVInstRVf<0b10, 0b00010, 0b1, VFMT_FP8INX, RISCVOpcode<"VFSUB_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsub.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMUL_B_INX : RVInstRVf<0b10, 0b00011, 0b0, VFMT_FP8INX, RISCVOpcode<"VFMUL_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmul.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMUL_R_B_INX : RVInstRVf<0b10, 0b00011, 0b1, VFMT_FP8INX, RISCVOpcode<"VFMUL_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmul.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDIV_B_INX : RVInstRVf<0b10, 0b00100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFDIV_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdiv.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDIV_R_B_INX : RVInstRVf<0b10, 0b00100, 0b1, VFMT_FP8INX, RISCVOpcode<"VFDIV_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdiv.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMIN_B_INX : RVInstRVf<0b10, 0b00101, 0b0, VFMT_FP8INX, RISCVOpcode<"VFMIN_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmin.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMIN_R_B_INX : RVInstRVf<0b10, 0b00101, 0b1, VFMT_FP8INX, RISCVOpcode<"VFMIN_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmin.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMAX_B_INX : RVInstRVf<0b10, 0b00110, 0b0, VFMT_FP8INX, RISCVOpcode<"VFMAX_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmax.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMAX_R_B_INX : RVInstRVf<0b10, 0b00110, 0b1, VFMT_FP8INX, RISCVOpcode<"VFMAX_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmax.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSQRT_B_INX : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP8INX, RISCVOpcode<"VFSQRT_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1), "vfsqrt.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMAC_B_INX : RVInstRVf<0b10, 0b01000, 0b0, VFMT_FP8INX, RISCVOpcode<"VFMAC_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmac.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMAC_R_B_INX : RVInstRVf<0b10, 0b01000, 0b1, VFMT_FP8INX, RISCVOpcode<"VFMAC_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmac.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMRE_B_INX : RVInstRVf<0b10, 0b01001, 0b0, VFMT_FP8INX, RISCVOpcode<"VFMRE_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmre.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMRE_R_B_INX : RVInstRVf<0b10, 0b01001, 0b1, VFMT_FP8INX, RISCVOpcode<"VFMRE_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfmre.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJ_B_INX : RVInstRVf<0b10, 0b01101, 0b0, VFMT_FP8INX, RISCVOpcode<"VFSGNJ_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnj.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJ_R_B_INX : RVInstRVf<0b10, 0b01101, 0b1, VFMT_FP8INX, RISCVOpcode<"VFSGNJ_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnj.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJN_B_INX : RVInstRVf<0b10, 0b01110, 0b0, VFMT_FP8INX, RISCVOpcode<"VFSGNJN_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnjn.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJN_R_B_INX : RVInstRVf<0b10, 0b01110, 0b1, VFMT_FP8INX, RISCVOpcode<"VFSGNJN_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnjn.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJX_B_INX : RVInstRVf<0b10, 0b01111, 0b0, VFMT_FP8INX, RISCVOpcode<"VFSGNJX_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnjx.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSGNJX_R_B_INX : RVInstRVf<0b10, 0b01111, 0b1, VFMT_FP8INX, RISCVOpcode<"VFSGNJX_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfsgnjx.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFEQ_B_INX : RVInstRVf<0b10, 0b10000, 0b0, VFMT_FP8INX, RISCVOpcode<"VFEQ_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfeq.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFEQ_R_B_INX : RVInstRVf<0b10, 0b10000, 0b1, VFMT_FP8INX, RISCVOpcode<"VFEQ_R_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfeq.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNE_B_INX : RVInstRVf<0b10, 0b10001, 0b0, VFMT_FP8INX, RISCVOpcode<"VFNE_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfne.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNE_R_B_INX : RVInstRVf<0b10, 0b10001, 0b1, VFMT_FP8INX, RISCVOpcode<"VFNE_R_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfne.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFLT_B_INX : RVInstRVf<0b10, 0b10010, 0b0, VFMT_FP8INX, RISCVOpcode<"VFLT_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vflt.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFLT_R_B_INX : RVInstRVf<0b10, 0b10010, 0b1, VFMT_FP8INX, RISCVOpcode<"VFLT_R_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vflt.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFGE_B_INX : RVInstRVf<0b10, 0b10011, 0b0, VFMT_FP8INX, RISCVOpcode<"VFGE_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfge.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFGE_R_B_INX : RVInstRVf<0b10, 0b10011, 0b1, VFMT_FP8INX, RISCVOpcode<"VFGE_R_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfge.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFLE_B_INX : RVInstRVf<0b10, 0b10100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFLE_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfle.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFLE_R_B_INX : RVInstRVf<0b10, 0b10100, 0b1, VFMT_FP8INX, RISCVOpcode<"VFLE_R_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfle.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFGT_B_INX : RVInstRVf<0b10, 0b10101, 0b0, VFMT_FP8INX, RISCVOpcode<"VFGT_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfgt.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFGT_R_B_INX : RVInstRVf<0b10, 0b10101, 0b1, VFMT_FP8INX, RISCVOpcode<"VFGT_R_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfgt.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMV_X_B_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFMV_X_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1), "vfmv.x.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFMV_B_X_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8INX, RISCVOpcode<"VFMV_B_X_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfmv.b.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00000;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCLASS_B_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFCLASS_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1), "vfclass.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00001;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_X_B_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFCVT_X_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1), "vfcvt.x.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_XU_B_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8INX, RISCVOpcode<"VFCVT_XU_B_INX", 0b0110011>,
             (outs GPR:$rd), (ins FPR16INX:$rs1), "vfcvt.xu.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00010;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_B_X_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFCVT_B_X_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfcvt.b.x", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_B_XU_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8INX, RISCVOpcode<"VFCVT_B_XU_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfcvt.b.xu", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00011;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCPKA_B_S_INX : RVInstRVf<0b10, 0b11000, 0b0, VFMT_FP8INX, RISCVOpcode<"VFCPKA_B_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfcpka.b.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCPKB_B_S_INX : RVInstRVf<0b10, 0b11000, 0b1, VFMT_FP8INX, RISCVOpcode<"VFCPKB_B_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfcpkb.b.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCPKC_B_S_INX : RVInstRVf<0b10, 0b11001, 0b0, VFMT_FP8INX, RISCVOpcode<"VFCPKC_B_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfcpkc.b.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCPKD_B_S_INX : RVInstRVf<0b10, 0b11001, 0b1, VFMT_FP8INX, RISCVOpcode<"VFCPKD_B_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfcpkd.b.s", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_S_B_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP32INX, RISCVOpcode<"VFCVT_S_B_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR16INX:$rs1), "vfcvt.s.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVTU_S_B_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP32INX, RISCVOpcode<"VFCVTU_S_B_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins GPR:$rs1), "vfcvtu.s.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_B_S_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFCVT_B_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR32INX:$rs1), "vfcvt.b.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00100;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVTU_B_S_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8INX, RISCVOpcode<"VFCVTU_B_S_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfcvtu.b.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00100;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_H_B_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP16INX, RISCVOpcode<"VFCVT_H_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1), "vfcvt.h.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVTU_H_B_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP16INX, RISCVOpcode<"VFCVTU_H_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfcvtu.h.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_B_H_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFCVT_B_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1), "vfcvt.b.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVTU_B_H_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8INX, RISCVOpcode<"VFCVTU_B_H_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfcvtu.b.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVT_B_B_INX : RVInstRVf<0b10, 0b01100, 0b0, VFMT_FP8INX, RISCVOpcode<"VFCVT_B_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1), "vfcvt.b.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFCVTU_B_B_INX : RVInstRVf<0b10, 0b01100, 0b1, VFMT_FP8INX, RISCVOpcode<"VFCVTU_B_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins GPR:$rs1), "vfcvtu.b.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }

} // let Predicates = [HasExtZvecquarterinx]

//===----------------------------------------------------------------------===//
// GROUP: Xfvecaltquarter (pred: HasExtXfvecaltquarter)
//        vectorial alternative quarter-precision floats - requires FLEN >= 16
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfvecaltquarter : SubtargetFeature<
  "xfvecaltquarter", "HasExtXfvecaltquarter", "true", "'Xfvecaltquarter' (vectorial alternative quarter-precision floats - requires FLEN >= 16)">;
def HasExtXfvecaltquarter : Predicate<
  "Subtarget->hasExtXfvecaltquarter()">, AssemblerPredicate<(all_of FeatureExtXfvecaltquarter), "'Xfvecaltquarter' (vectorial alternative quarter-precision floats - requires FLEN >= 16)">;
let Predicates = [HasExtXfvecaltquarter] in {

// Instructions

// Pseudo instructions
def : InstAlias<"vfadd.ab $rd, $rs1, $rs2",   (VFADD_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfadd.r.ab $rd, $rs1, $rs2",   (VFADD_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsub.ab $rd, $rs1, $rs2",   (VFSUB_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsub.r.ab $rd, $rs1, $rs2",   (VFSUB_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmul.ab $rd, $rs1, $rs2",   (VFMUL_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmul.r.ab $rd, $rs1, $rs2",   (VFMUL_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdiv.ab $rd, $rs1, $rs2",   (VFDIV_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdiv.r.ab $rd, $rs1, $rs2",   (VFDIV_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmin.ab $rd, $rs1, $rs2",   (VFMIN_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmin.r.ab $rd, $rs1, $rs2",   (VFMIN_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmax.ab $rd, $rs1, $rs2",   (VFMAX_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmax.r.ab $rd, $rs1, $rs2",   (VFMAX_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsqrt.ab $rd, $rs1",   (VFSQRT_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfmac.ab $rd, $rs1, $rs2",   (VFMAC_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmac.r.ab $rd, $rs1, $rs2",   (VFMAC_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmre.ab $rd, $rs1, $rs2",   (VFMRE_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmre.r.ab $rd, $rs1, $rs2",   (VFMRE_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnj.ab $rd, $rs1, $rs2",   (VFSGNJ_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnj.r.ab $rd, $rs1, $rs2",   (VFSGNJ_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnjn.ab $rd, $rs1, $rs2",   (VFSGNJN_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnjn.r.ab $rd, $rs1, $rs2",   (VFSGNJN_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnjx.ab $rd, $rs1, $rs2",   (VFSGNJX_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsgnjx.r.ab $rd, $rs1, $rs2",   (VFSGNJX_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfeq.ab $rd, $rs1, $rs2",   (VFEQ_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfeq.r.ab $rd, $rs1, $rs2",   (VFEQ_R_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfne.ab $rd, $rs1, $rs2",   (VFNE_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfne.r.ab $rd, $rs1, $rs2",   (VFNE_R_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vflt.ab $rd, $rs1, $rs2",   (VFLT_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vflt.r.ab $rd, $rs1, $rs2",   (VFLT_R_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfge.ab $rd, $rs1, $rs2",   (VFGE_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfge.r.ab $rd, $rs1, $rs2",   (VFGE_R_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfle.ab $rd, $rs1, $rs2",   (VFLE_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfle.r.ab $rd, $rs1, $rs2",   (VFLE_R_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfgt.ab $rd, $rs1, $rs2",   (VFGT_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfgt.r.ab $rd, $rs1, $rs2",   (VFGT_R_B GPR:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfmv.x.ab $rd, $rs1",   (VFMV_X_B GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfmv.ab.x $rd, $rs1",   (VFMV_B_X FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfclass.ab $rd, $rs1",   (VFCLASS_B GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvt.x.ab $rd, $rs1",   (VFCVT_X_B GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvt.xu.ab $rd, $rs1",   (VFCVT_XU_B GPR:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvt.ab.x $rd, $rs1",   (VFCVT_B_X FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.ab.xu $rd, $rs1",   (VFCVT_B_XU FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcpka.ab.s $rd, $rs1, $rs2",   (VFCPKA_B_S FPR16:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfcpkb.ab.s $rd, $rs1, $rs2",   (VFCPKB_B_S FPR16:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfcpkc.ab.s $rd, $rs1, $rs2",   (VFCPKC_B_S FPR16:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfcpkd.ab.s $rd, $rs1, $rs2",   (VFCPKD_B_S FPR16:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfcpka.ab.d $rd, $rs1, $rs2",   (VFCPKA_B_D FPR16:$rd, FPR64:$rs1, FPR64:$rs2), 0>;
def : InstAlias<"vfcpkb.ab.d $rd, $rs1, $rs2",   (VFCPKB_B_D FPR16:$rd, FPR64:$rs1, FPR64:$rs2), 0>;
def : InstAlias<"vfcpkc.ab.d $rd, $rs1, $rs2",   (VFCPKC_B_D FPR16:$rd, FPR64:$rs1, FPR64:$rs2), 0>;
def : InstAlias<"vfcpkd.ab.d $rd, $rs1, $rs2",   (VFCPKD_B_D FPR16:$rd, FPR64:$rs1, FPR64:$rs2), 0>;
def : InstAlias<"vfcvt.s.ab $rd, $rs1",   (VFCVT_S_B FPR32:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.s.ab $rd, $rs1",   (VFCVTU_S_B FPR32:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.ab.s $rd, $rs1",   (VFCVT_B_S FPR16:$rd, FPR32:$rs1), 0>;
def : InstAlias<"vfcvtu.ab.s $rd, $rs1",   (VFCVTU_B_S FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.h.ab $rd, $rs1",   (VFCVT_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.h.ab $rd, $rs1",   (VFCVTU_H_B FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.ab.h $rd, $rs1",   (VFCVT_B_H FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.ab.h $rd, $rs1",   (VFCVTU_B_H FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.ah.ab $rd, $rs1",   (VFCVT_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.ah.ab $rd, $rs1",   (VFCVTU_H_B FPR16:$rd, GPR:$rs1), 0>;
def : InstAlias<"vfcvt.ab.ah $rd, $rs1",   (VFCVT_B_H FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfcvtu.ab.ah $rd, $rs1",   (VFCVTU_B_H FPR16:$rd, GPR:$rs1), 0>;
} // let Predicates = [HasExtXfvecaltquarter]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxhalf (pred: HasExtXfauxhalf)
//        half-precision auxiliary operations - requires Xfhalf extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxhalf : SubtargetFeature<
  "xfauxhalf", "HasExtXfauxhalf", "true", "'Xfauxhalf' (half-precision auxiliary operations - requires Xfhalf extension)">;
def HasExtXfauxhalf : Predicate<
  "Subtarget->hasExtXfauxhalf()">, AssemblerPredicate<(all_of FeatureExtXfauxhalf), "'Xfauxhalf' (half-precision auxiliary operations - requires Xfhalf extension)">;
let Predicates = [HasExtXfauxhalf] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def FMULEX_S_H : RVInstRFrm<0b0100110, RISCVOpcode<"FMULEX_S_H", 0b1010011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2, frmarg:$funct3), "fmulex.s.h", "$rd, $rs1, $rs2, $funct3">, Sched<[]> ;
def      : InstAlias<"fmulex.s.h $rd, $rs1, $rs2", (FMULEX_S_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111)>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def FMACEX_S_H : RVInstRFrm<0b0101010, RISCVOpcode<"FMACEX_S_H", 0b1010011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2, frmarg:$funct3), "fmacex.s.h", "$rd, $rs1, $rs2, $funct3">, Sched<[]> ;
def      : InstAlias<"fmacex.s.h $rd, $rs1, $rs2", (FMACEX_S_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111)>;

// Pseudo instructions
} // let Predicates = [HasExtXfauxhalf]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxalthalf (pred: HasExtXfauxalthalf)
//        alternate half-precision auxiliary operations - requires Xfalthalf extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxalthalf : SubtargetFeature<
  "xfauxalthalf", "HasExtXfauxalthalf", "true", "'Xfauxalthalf' (alternate half-precision auxiliary operations - requires Xfalthalf extension)">;
def HasExtXfauxalthalf : Predicate<
  "Subtarget->hasExtXfauxalthalf()">, AssemblerPredicate<(all_of FeatureExtXfauxalthalf), "'Xfauxalthalf' (alternate half-precision auxiliary operations - requires Xfalthalf extension)">;
let Predicates = [HasExtXfauxalthalf] in {

// Instructions

// Pseudo instructions
def : InstAlias<"fmulex.s.ah $rd, $rs1, $rs2, $rm",   (FMULEX_S_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fmulex.s.ah $rd, $rs1, $rs2",   (FMULEX_S_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111), 0>;
def : InstAlias<"fmacex.s.ah $rd, $rs1, $rs2, $rm",   (FMACEX_S_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fmacex.s.ah $rd, $rs1, $rs2",   (FMACEX_S_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111), 0>;
} // let Predicates = [HasExtXfauxalthalf]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxquarter (pred: HasExtXfauxquarter)
//        quarter-precision auxiliary operations - requires Xfquarter extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxquarter : SubtargetFeature<
  "xfauxquarter", "HasExtXfauxquarter", "true", "'Xfauxquarter' (quarter-precision auxiliary operations - requires Xfquarter extension)">;
def HasExtXfauxquarter : Predicate<
  "Subtarget->hasExtXfauxquarter()">, AssemblerPredicate<(all_of FeatureExtXfauxquarter), "'Xfauxquarter' (quarter-precision auxiliary operations - requires Xfquarter extension)">;
let Predicates = [HasExtXfauxquarter] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def FMULEX_S_B : RVInstRFrm<0b0100111, RISCVOpcode<"FMULEX_S_B", 0b1010011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2, frmarg:$funct3), "fmulex.s.b", "$rd, $rs1, $rs2, $funct3">, Sched<[]> ;
def      : InstAlias<"fmulex.s.b $rd, $rs1, $rs2", (FMULEX_S_B FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111)>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def FMACEX_S_B : RVInstRFrm<0b0101011, RISCVOpcode<"FMACEX_S_B", 0b1010011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2, frmarg:$funct3), "fmacex.s.b", "$rd, $rs1, $rs2, $funct3">, Sched<[]> ;
def      : InstAlias<"fmacex.s.b $rd, $rs1, $rs2", (FMACEX_S_B FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111)>;

// Pseudo instructions
} // let Predicates = [HasExtXfauxquarter]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxaltquarter (pred: HasExtXfauxaltquarter)
//        alternate quarter-precision auxiliary operations - requires Xfaltquarter extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxaltquarter : SubtargetFeature<
  "xfauxaltquarter", "HasExtXfauxaltquarter", "true", "'Xfauxaltquarter' (alternate quarter-precision auxiliary operations - requires Xfaltquarter extension)">;
def HasExtXfauxaltquarter : Predicate<
  "Subtarget->hasExtXfauxaltquarter()">, AssemblerPredicate<(all_of FeatureExtXfauxaltquarter), "'Xfauxaltquarter' (alternate quarter-precision auxiliary operations - requires Xfaltquarter extension)">;
let Predicates = [HasExtXfauxaltquarter] in {

// Instructions

// Pseudo instructions
def : InstAlias<"fmulex.s.ab $rd, $rs1, $rs2, $rm",   (FMULEX_S_B FPR32:$rd, FPR32:$rs1, FPR32:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fmulex.s.ab $rd, $rs1, $rs2",   (FMULEX_S_B FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111), 0>;
def : InstAlias<"fmacex.s.ab $rd, $rs1, $rs2, $rm",   (FMACEX_S_B FPR32:$rd, FPR32:$rs1, FPR32:$rs2, frmarg:$rm), 0>;
def : InstAlias<"fmacex.s.ab $rd, $rs1, $rs2",   (FMACEX_S_B FPR32:$rd, FPR32:$rs1, FPR32:$rs2, 0b111), 0>;
} // let Predicates = [HasExtXfauxaltquarter]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxvecsingle (pred: HasExtXfauxvecsingle)
//        vectorial single-precision auxiliary operations - requires Xfvecsingle extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxvecsingle : SubtargetFeature<
  "xfauxvecsingle", "HasExtXfauxvecsingle", "true", "'Xfauxvecsingle' (vectorial single-precision auxiliary operations - requires Xfvecsingle extension)">;
def HasExtXfauxvecsingle : Predicate<
  "Subtarget->hasExtXfauxvecsingle()">, AssemblerPredicate<(all_of FeatureExtXfauxvecsingle), "'Xfauxvecsingle' (vectorial single-precision auxiliary operations - requires Xfvecsingle extension)">;
let Predicates = [HasExtXfauxvecsingle] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSUM_S : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP32, RISCVOpcode<"VFSUM_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1), "vfsum.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b11100;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFNSUM_S : RVInstRVf<0b10, 0b10111, 0b0, VFMT_FP32, RISCVOpcode<"VFNSUM_S", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1), "vfnsum.s", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b11100;
  }

// Pseudo instructions
} // let Predicates = [HasExtXfauxvecsingle]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxvechalf (pred: HasExtXfauxvechalf)
//        vectorial half-precision auxiliary operations - requires Xfvechalf extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxvechalf : SubtargetFeature<
  "xfauxvechalf", "HasExtXfauxvechalf", "true", "'Xfauxvechalf' (vectorial half-precision auxiliary operations - requires Xfvechalf extension)">;
def HasExtXfauxvechalf : Predicate<
  "Subtarget->hasExtXfauxvechalf()">, AssemblerPredicate<(all_of FeatureExtXfauxvechalf), "'Xfauxvechalf' (vectorial half-precision auxiliary operations - requires Xfvechalf extension)">;
let Predicates = [HasExtXfauxvechalf] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSUM_H : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP16, RISCVOpcode<"VFSUM_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfsum.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b11110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFNSUM_H : RVInstRVf<0b10, 0b10111, 0b0, VFMT_FP16, RISCVOpcode<"VFNSUM_H", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfnsum.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b11110;
  }

// Pseudo instructions
} // let Predicates = [HasExtXfauxvechalf]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxvecalthalf (pred: HasExtXfauxvecalthalf)
//        - vectorial alternate half-precision auxiliary operations - requires Xfvecalthalf extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxvecalthalf : SubtargetFeature<
  "xfauxvecalthalf", "HasExtXfauxvecalthalf", "true", "'Xfauxvecalthalf' (- vectorial alternate half-precision auxiliary operations - requires Xfvecalthalf extension)">;
def HasExtXfauxvecalthalf : Predicate<
  "Subtarget->hasExtXfauxvecalthalf()">, AssemblerPredicate<(all_of FeatureExtXfauxvecalthalf), "'Xfauxvecalthalf' (- vectorial alternate half-precision auxiliary operations - requires Xfvecalthalf extension)">;
let Predicates = [HasExtXfauxvecalthalf] in {

// Instructions

// Pseudo instructions
def : InstAlias<"vfsum.ah $rd, $rs1",   (VFSUM_H FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfnsum.ah $rd, $rs1",   (VFNSUM_H FPR16:$rd, FPR16:$rs1), 0>;
} // let Predicates = [HasExtXfauxvecalthalf]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxvecquarter (pred: HasExtXfauxvecquarter)
//        vectorial quarter-precision auxiliary operations - requires Xfvecquarter extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxvecquarter : SubtargetFeature<
  "xfauxvecquarter", "HasExtXfauxvecquarter", "true", "'Xfauxvecquarter' (vectorial quarter-precision auxiliary operations - requires Xfvecquarter extension)">;
def HasExtXfauxvecquarter : Predicate<
  "Subtarget->hasExtXfauxvecquarter()">, AssemblerPredicate<(all_of FeatureExtXfauxvecquarter), "'Xfauxvecquarter' (vectorial quarter-precision auxiliary operations - requires Xfvecquarter extension)">;
let Predicates = [HasExtXfauxvecquarter] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSUM_B : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP8, RISCVOpcode<"VFSUM_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfsum.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFNSUM_B : RVInstRVf<0b10, 0b10111, 0b0, VFMT_FP8, RISCVOpcode<"VFNSUM_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfnsum.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b00111;
  }

// Pseudo instructions
} // let Predicates = [HasExtXfauxvecquarter]


//===----------------------------------------------------------------------===//
// GROUP: Xfauxvecaltquarter (pred: HasExtXfauxvecaltquarter)
//        - vectorial alternate quarter-precision auxiliary operations - requires Xfvecaltquarter extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfauxvecaltquarter : SubtargetFeature<
  "xfauxvecaltquarter", "HasExtXfauxvecaltquarter", "true", "'Xfauxvecaltquarter' (- vectorial alternate quarter-precision auxiliary operations - requires Xfvecaltquarter extension)">;
def HasExtXfauxvecaltquarter : Predicate<
  "Subtarget->hasExtXfauxvecaltquarter()">, AssemblerPredicate<(all_of FeatureExtXfauxvecaltquarter), "'Xfauxvecaltquarter' (- vectorial alternate quarter-precision auxiliary operations - requires Xfvecaltquarter extension)">;
let Predicates = [HasExtXfauxvecaltquarter] in {

// Instructions

// Pseudo instructions
def : InstAlias<"vfsum.ab $rd, $rs1",   (VFSUM_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfnsum.ab $rd, $rs1",   (VFNSUM_B FPR16:$rd, FPR16:$rs1), 0>;
} // let Predicates = [HasExtXfauxvecaltquarter]


//===----------------------------------------------------------------------===//
// GROUP: Xfexpauxvechalf (pred: HasExtXfexpauxvechalf)
//        vectorial half-precision expanding auxiliary operations - requires Xfvechalf extension
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfexpauxvechalf : SubtargetFeature<
  "xfexpauxvechalf", "HasExtXfexpauxvechalf", "true", "'Xfexpauxvechalf' (vectorial half-precision expanding auxiliary operations - requires Xfvechalf extension)">;
def HasExtXfexpauxvechalf : Predicate<
  "Subtarget->hasExtXfexpauxvechalf()">, AssemblerPredicate<(all_of FeatureExtXfexpauxvechalf), "'Xfexpauxvechalf' (vectorial half-precision expanding auxiliary operations - requires Xfvechalf extension)">;

def FeatureExtZexpauxvechalfinx : SubtargetFeature<
  "zexpauxvechalfinx", "HasExtZexpauxvechalfinx", "true", "'Zexpauxvechalfinx' (vectorial half-precision expanding auxiliary operations - requires Zvechalfinx extension)">;
def HasExtZexpauxvechalfinx : Predicate<
  "Subtarget->hasExtZexpauxvechalfinx()">, AssemblerPredicate<(all_of FeatureExtZexpauxvechalfinx), "'Zexpauxvechalfinx' (vectorial half-precision expanding auxiliary operations - requires Zvechalfinx extension)">;

let Predicates = [HasExtXfexpauxvechalf] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFSUMEX_S_H : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP32, RISCVOpcode<"VFSUMEX_S_H", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1), "vfsumex.s.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b10110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFNSUMEX_S_H : RVInstRVf<0b10, 0b10111, 0b0, VFMT_FP32, RISCVOpcode<"VFNSUMEX_S_H", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1), "vfnsumex.s.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b10110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFDOTPEX_S_H : RVInstRVf<0b10, 0b01011, 0b0, VFMT_FP32, RISCVOpcode<"VFDOTPEX_S_H", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfdotpex.s.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFDOTPEX_S_R_H : RVInstRVf<0b10, 0b01011, 0b1, VFMT_FP32, RISCVOpcode<"VFDOTPEX_S_R_H", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfdotpex.s.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFNDOTPEX_S_H : RVInstRVf<0b10, 0b11101, 0b0, VFMT_FP32, RISCVOpcode<"VFNDOTPEX_S_H", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfndotpex.s.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFNDOTPEX_S_R_H : RVInstRVf<0b10, 0b11101, 0b1, VFMT_FP32, RISCVOpcode<"VFNDOTPEX_S_R_H", 0b0110011>,
             (outs FPR32:$rd), (ins FPR32:$rs1, FPR32:$rs2), "vfndotpex.s.r.h", "$rd, $rs1, $rs2">, Sched<[]>;

// Pseudo instructions
} // let Predicates = [HasExtXfexpauxvechalf]

let Predicates = [HasExtZexpauxvechalfinx] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSUMEX_S_H_INX : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP32INX, RISCVOpcode<"VFSUMEX_S_H_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1), "vfsumex.s.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b10110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNSUMEX_S_H_INX : RVInstRVf<0b10, 0b10111, 0b0, VFMT_FP32INX, RISCVOpcode<"VFNSUMEX_S_H_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1), "vfnsumex.s.h", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b10110;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDOTPEX_S_H_INX : RVInstRVf<0b10, 0b01011, 0b0, VFMT_FP32INX, RISCVOpcode<"VFDOTPEX_S_H_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfdotpex.s.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDOTPEX_S_R_H_INX : RVInstRVf<0b10, 0b01011, 0b1, VFMT_FP32INX, RISCVOpcode<"VFDOTPEX_S_R_H_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfdotpex.s.r.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNDOTPEX_S_H_INX : RVInstRVf<0b10, 0b11101, 0b0, VFMT_FP32INX, RISCVOpcode<"VFNDOTPEX_S_H_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfndotpex.s.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNDOTPEX_S_R_H_INX : RVInstRVf<0b10, 0b11101, 0b1, VFMT_FP32INX, RISCVOpcode<"VFNDOTPEX_S_R_H_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "vfndotpex.s.r.h", "$rd, $rs1, $rs2">, Sched<[]>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def FCDOTPEX_S_H_INX : RVInstRVf<0b10, 0b01011, 0b0, VFMT_FP32INX, RISCVOpcode<"FCDOTPEX_S_H_INX", 0b1110111>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "fcdotpex.s.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def FCNDOTPEX_S_H_INX : RVInstRVf<0b10, 0b01011, 0b1, VFMT_FP32INX, RISCVOpcode<"FCNDOTPEX_S_H_INX", 0b1110111>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "fcndotpex.s.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def FCCDOTPEX_S_H_INX : RVInstRVf<0b10, 0b11101, 0b0, VFMT_FP32INX, RISCVOpcode<"FCCDOTPEX_S_H_INX", 0b1110111>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "fccdotpex.s.h", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def FCCNDOTPEX_S_H_INX : RVInstRVf<0b10, 0b11101, 0b1, VFMT_FP32INX, RISCVOpcode<"FCCNDOTPEX_S_H_INX", 0b1110111>,
             (outs FPR32INX:$rd), (ins FPR32INX:$rs1, FPR32INX:$rs2), "fccndotpex.s.h", "$rd, $rs1, $rs2">, Sched<[]>;

// Pseudo instructions
} // let Predicates = [HasExtZexpauxvechalfinx]


//===----------------------------------------------------------------------===//
// GROUP: Xfexpauxvecalthalf (pred: HasExtXfexpauxvecalthalf)
//        vectorial alternate half-precision expanding auxiliary operations
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfexpauxvecalthalf : SubtargetFeature<
  "xfexpauxvecalthalf", "HasExtXfexpauxvecalthalf", "true", "'Xfexpauxvecalthalf' (vectorial alternate half-precision expanding auxiliary operations)">;
def HasExtXfexpauxvecalthalf : Predicate<
  "Subtarget->hasExtXfexpauxvecalthalf()">, AssemblerPredicate<(all_of FeatureExtXfexpauxvecalthalf), "'Xfexpauxvecalthalf' (vectorial alternate half-precision expanding auxiliary operations)">;
let Predicates = [HasExtXfexpauxvecalthalf] in {

// Instructions

// Pseudo instructions
def : InstAlias<"vfsumex.s.ah $rd, $rs1",   (VFSUMEX_S_H FPR32:$rd, FPR32:$rs1), 0>;
def : InstAlias<"vfnsumex.s.ah $rd, $rs1",   (VFNSUMEX_S_H FPR32:$rd, FPR32:$rs1), 0>;
def : InstAlias<"vfdotpex.s.ah $rd, $rs1, $rs2",   (VFDOTPEX_S_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfdotpex.s.r.ah $rd, $rs1, $rs2",   (VFDOTPEX_S_R_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfndotpex.s.ah $rd, $rs1, $rs2",   (VFNDOTPEX_S_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
def : InstAlias<"vfndotpex.s.r.ah $rd, $rs1, $rs2",   (VFNDOTPEX_S_R_H FPR32:$rd, FPR32:$rs1, FPR32:$rs2), 0>;
} // let Predicates = [HasExtXfexpauxvecalthalf]


//===----------------------------------------------------------------------===//
// GROUP: Xfexpauxvecquarter (pred: HasExtXfexpauxvecquarter)
//        vectorial quarter-precision expanding auxiliary operations
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfexpauxvecquarter : SubtargetFeature<
  "xfexpauxvecquarter", "HasExtXfexpauxvecquarter", "true", "'Xfexpauxvecquarter' (vectorial quarter-precision expanding auxiliary operations)">;
def HasExtXfexpauxvecquarter : Predicate<
  "Subtarget->hasExtXfexpauxvecquarter()">, AssemblerPredicate<(all_of FeatureExtXfexpauxvecquarter), "'Xfexpauxvecquarter' (vectorial quarter-precision expanding auxiliary operations)">;

def FeatureExtZexpauxvecquarterinx : SubtargetFeature<
  "zexpauxvecquarterinx", "HasExtZexpauxvecquarterinx", "true", "'Zexpauxvecquarterinx' (vectorial quarter-precision expanding auxiliary operations)">;
def HasExtZexpauxvecquarterinx : Predicate<
  "Subtarget->hasExtZexpauxvecquarterinx()">, AssemblerPredicate<(all_of FeatureExtZexpauxvecquarterinx), "'Zexpauxvecquarterinx' (vectorial quarter-precision expanding auxiliary operations)">;

let Predicates = [HasExtXfexpauxvecquarter] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFSUMEX_H_B : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP16, RISCVOpcode<"VFSUMEX_H_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfsumex.h.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b10111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFNSUMEX_H_B : RVInstRVf<0b10, 0b10111, 0b0, VFMT_FP16, RISCVOpcode<"VFNSUMEX_H_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1), "vfnsumex.h.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b10111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFDOTPEX_H_B : RVInstRVf<0b10, 0b01011, 0b0, VFMT_FP16, RISCVOpcode<"VFDOTPEX_H_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdotpex.h.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFDOTPEX_H_R_B : RVInstRVf<0b10, 0b01011, 0b1, VFMT_FP16, RISCVOpcode<"VFDOTPEX_H_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdotpex.h.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFNDOTPEX_H_B : RVInstRVf<0b10, 0b11101, 0b0, VFMT_FP16, RISCVOpcode<"VFNDOTPEX_H_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfndotpex.h.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "" in
def VFNDOTPEX_H_R_B : RVInstRVf<0b10, 0b11101, 0b1, VFMT_FP16, RISCVOpcode<"VFNDOTPEX_H_R_B", 0b0110011>,
             (outs FPR16:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfndotpex.h.r.b", "$rd, $rs1, $rs2">, Sched<[]>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFDOTPEXA_S_B : RVInstRVf<0b10, 0b11100, 0b0, VFMT_FP32, RISCVOpcode<"VFDOTPEXA_S_B", 0b0110011>,
             (outs FPR32:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdotpexa.s.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFDOTPEXA_S_R_B : RVInstRVf<0b10, 0b11100, 0b1, VFMT_FP32, RISCVOpcode<"VFDOTPEXA_S_R_B", 0b0110011>,
             (outs FPR32:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdotpexa.s.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFDOTPEXB_S_B : RVInstRVf<0b10, 0b11110, 0b0, VFMT_FP32, RISCVOpcode<"VFDOTPEXB_S_B", 0b0110011>,
             (outs FPR32:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdotpexb.s.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0 in
def VFDOTPEXB_S_R_B : RVInstRVf<0b10, 0b11110, 0b1, VFMT_FP32, RISCVOpcode<"VFDOTPEXB_S_R_B", 0b0110011>,
             (outs FPR32:$rd), (ins FPR16:$rs1, FPR16:$rs2), "vfdotpexb.s.r.b", "$rd, $rs1, $rs2">, Sched<[]>;


// Pseudo instructions
def : InstAlias<"vfsumex.ah.b $rd, $rs1",   (VFSUMEX_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfnsumex.ah.b $rd, $rs1",   (VFNSUMEX_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfdotpex.ah.b $rd, $rs1, $rs2",   (VFDOTPEX_H_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdotpex.ah.r.b $rd, $rs1, $rs2",   (VFDOTPEX_H_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdotpexa.s.ab $rd, $rs1, $rs2",   (VFDOTPEXA_S_B FPR32:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdotpexa.s.r.ab $rd, $rs1, $rs2",   (VFDOTPEXA_S_R_B FPR32:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdotpexb.s.ab $rd, $rs1, $rs2",   (VFDOTPEXB_S_B FPR32:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdotpexb.s.r.ab $rd, $rs1, $rs2",   (VFDOTPEXB_S_R_B FPR32:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfndotpex.ah.b $rd, $rs1, $rs2",   (VFNDOTPEX_H_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfndotpex.ah.r.b $rd, $rs1, $rs2",   (VFNDOTPEX_H_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
} // let Predicates = [HasExtXfexpauxvecquarter]


let Predicates = [HasExtZexpauxvecquarterinx] in {

// Instructions
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFSUMEX_H_B_INX : RVInstRVf<0b10, 0b00111, 0b0, VFMT_FP16INX, RISCVOpcode<"VFSUMEX_H_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1), "vfsumex.h.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b10111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNSUMEX_H_B_INX : RVInstRVf<0b10, 0b10111, 0b0, VFMT_FP16INX, RISCVOpcode<"VFNSUMEX_H_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1), "vfnsumex.h.b", "$rd, $rs1">, Sched<[]> {
    let rs2 = 0b10111;
  }
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDOTPEX_H_B_INX : RVInstRVf<0b10, 0b01011, 0b0, VFMT_FP16INX, RISCVOpcode<"VFDOTPEX_H_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdotpex.h.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDOTPEX_H_R_B_INX : RVInstRVf<0b10, 0b01011, 0b1, VFMT_FP16INX, RISCVOpcode<"VFDOTPEX_H_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdotpex.h.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNDOTPEX_H_B_INX : RVInstRVf<0b10, 0b11101, 0b0, VFMT_FP16INX, RISCVOpcode<"VFNDOTPEX_H_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfndotpex.h.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFNDOTPEX_H_R_B_INX : RVInstRVf<0b10, 0b11101, 0b1, VFMT_FP16INX, RISCVOpcode<"VFNDOTPEX_H_R_B_INX", 0b0110011>,
             (outs FPR16INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfndotpex.h.r.b", "$rd, $rs1, $rs2">, Sched<[]>;

let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDOTPEXA_S_B_INX : RVInstRVf<0b10, 0b11100, 0b0, VFMT_FP32INX, RISCVOpcode<"VFDOTPEX_H_B_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdotpexa.s.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDOTPEXA_S_R_B_INX : RVInstRVf<0b10, 0b11100, 0b1, VFMT_FP32INX, RISCVOpcode<"VFDOTPEXA_S_R_B_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdotpexa.s.r.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDOTPEXB_S_B_INX : RVInstRVf<0b10, 0b11110, 0b0, VFMT_FP32INX, RISCVOpcode<"VFDOTPEXB_S_B_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdotpexb.s.b", "$rd, $rs1, $rs2">, Sched<[]>;
let hasSideEffects = 0, mayLoad = 0, mayStore = 0, DecoderNamespace = "RVZfinx" in
def VFDOTPEXB_S_R_B_INX : RVInstRVf<0b10, 0b11110, 0b1, VFMT_FP32INX, RISCVOpcode<"VFDOTPEXB_S_R_B_INX", 0b0110011>,
             (outs FPR32INX:$rd), (ins FPR16INX:$rs1, FPR16INX:$rs2), "vfdotpexb.s.r.b", "$rd, $rs1, $rs2">, Sched<[]>;


} // let Predicates = [HasExtZexpauxvecquarterinx]

//===----------------------------------------------------------------------===//
// GROUP: Xfexpauxvecaltquarter (pred: HasExtXfexpauxvecaltquarter)
//        vectorial alternate quarter-precision expanding auxiliary operations
//===----------------------------------------------------------------------===//

// Subtarget definitions
def FeatureExtXfexpauxvecaltquarter : SubtargetFeature<
  "xfexpauxvecaltquarter", "HasExtXfexpauxvecaltquarter", "true", "'Xfexpauxvecaltquarter' (vectorial alternate quarter-precision expanding auxiliary operations)">;
def HasExtXfexpauxvecaltquarter : Predicate<
  "Subtarget->hasExtXfexpauxvecaltquarter()">, AssemblerPredicate<(all_of FeatureExtXfexpauxvecaltquarter), "'Xfexpauxvecaltquarter' (vectorial alternate quarter-precision expanding auxiliary operations)">;
let Predicates = [HasExtXfexpauxvecaltquarter] in {

// Instructions

// Pseudo instructions
def : InstAlias<"vfsumex.h.ab $rd, $rs1",   (VFSUMEX_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfnsumex.h.ab $rd, $rs1",   (VFNSUMEX_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfdotpex.h.ab $rd, $rs1, $rs2",   (VFDOTPEX_H_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdotpex.h.r.ab $rd, $rs1, $rs2",   (VFDOTPEX_H_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfndotpex.h.ab $rd, $rs1, $rs2",   (VFNDOTPEX_H_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfndotpex.h.r.ab $rd, $rs1, $rs2",   (VFNDOTPEX_H_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfsumex.ah.ab $rd, $rs1",   (VFSUMEX_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfnsumex.ah.ab $rd, $rs1",   (VFNSUMEX_H_B FPR16:$rd, FPR16:$rs1), 0>;
def : InstAlias<"vfdotpex.ah.ab $rd, $rs1, $rs2",   (VFDOTPEX_H_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfdotpex.ah.r.ab $rd, $rs1, $rs2",   (VFDOTPEX_H_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfndotpex.ah.ab $rd, $rs1, $rs2",   (VFNDOTPEX_H_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
def : InstAlias<"vfndotpex.ah.r.ab $rd, $rs1, $rs2",   (VFNDOTPEX_H_R_B FPR16:$rd, FPR16:$rs1, FPR16:$rs2), 0>;
} // let Predicates = [HasExtXfexpauxvecaltquarter]


